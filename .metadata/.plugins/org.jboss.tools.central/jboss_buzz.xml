<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>How to pick the right container base image</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/qgk4rbd3QMg/" /><category term="Containers" /><category term="DevOps" /><category term="Linux" /><category term="Uncategorized" /><category term="container base image" /><category term="rhel 8" /><category term="UBI" /><author><name>Scott McCarty (fatherlinux)</name></author><id>https://developers.redhat.com/blog/?p=890697</id><updated>2021-04-13T13:05:32Z</updated><published>2021-04-13T13:05:32Z</published><content type="html">&lt;p&gt;Picking the right &lt;a target="_blank" rel="nofollow" href="/topics/containers/"&gt;container&lt;/a&gt; base image feels hard for a lot of people. Every major &lt;a target="_blank" rel="nofollow" href="/topics/linux"&gt;Linux&lt;/a&gt; distribution offers a base image. Open source projects for programming languages like Python, Ruby, and &lt;a target="_blank" rel="nofollow" href="/topics/nodejs"&gt;Node.js&lt;/a&gt; offer their own base images. Many open source projects and vendors also provide their own images for services like MariaDB, Redis, Elastic, and MySQL. While programming languages and services are not technically &lt;a target="_blank" rel="nofollow" href="/blog/2018/02/22/container-terminology-practical-introduction/#h.hc7hn0blfovy"&gt;base images&lt;/a&gt;, most people perceive them as such and include them in their analysis when choosing standardized base images.&lt;/p&gt; &lt;h2&gt;Why the container base image matters&lt;/h2&gt; &lt;p&gt;According to an upcoming report based on a survey conducted by the Red Hat Europe, Middle East, and Africa (EMEA) team, a large percentage of developers use a standardized base image chosen by their operations team. However, the survey found that nearly as many teams let developers use whatever they want in production. This is a big indicator that teams are having trouble figuring out the right methodology for handling container base images.&lt;/p&gt; &lt;p&gt;You might be asking yourself, why does it matter? In the same survey, a large majority of surveyed developers ranked &lt;em&gt;security&lt;/em&gt; as a top three requirement for container base images. Developers ranked &lt;em&gt;guaranteed operations&lt;/em&gt; as number two, with &lt;em&gt;multi-year life cycle&lt;/em&gt; a distant third for priorities.&lt;/p&gt; &lt;p&gt;If any of these requirements is a top priority for you and your teams, then &lt;a target="_blank" rel="nofollow" href="/products/rhel/ubi"&gt;Red Hat Universal Base Image&lt;/a&gt; (UBI) is an easy choice. UBI is a component of &lt;a target="_blank" rel="nofollow" href="/products/rhel/download"&gt;Red Hat Enterprise Linux 8&lt;/a&gt; that helps build containers. It is a lightweight version of the Red Hat Enterprise Linux user space, stripped down to the bare essentials.&lt;/p&gt; &lt;p&gt;Remember, what’s in a base container image is still an operating system that derives its security, reliability, and life cycle from the underlying operating system on which it is built. UBI is a well-maintained, up-to-date, enterprise-grade container image. It is also freely usable and freely distributable. You don’t even need to be a Red Hat customer to use it.&lt;/p&gt; &lt;h2&gt;Get started with Universal Base Images&lt;/h2&gt; &lt;p&gt;Development and operations teams should think deeply about their container base image. To help you make this strategic decision, we’ve published a new e-book, &lt;a href="https://developers.redhat.com/books/red-hat-universal-base-images-ubi"&gt;&lt;i&gt;Red Hat Universal Base Images&lt;/i&gt;&lt;/a&gt;. This book contains information to help you understand and get started with UBI, including:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;How you can use freely available container images that build on RHEL&amp;#8217;s long-term support, commitment to quality, security, reliability, and performance.&lt;/li&gt; &lt;li&gt;Why choosing a base container image is a strategic decision and why they are a key part of your standard operating environment.&lt;/li&gt; &lt;li&gt;Which types of UBI images are available and how to choose between them.&lt;/li&gt; &lt;li&gt;How to find the available UBI images, including language and other runtime images that are ready for you to add your code.&lt;/li&gt; &lt;li&gt;Where to find additional packages to use with UBI images.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/books/red-hat-universal-base-images-ubi"&gt;Read the e-book&lt;/a&gt; to learn why what’s in your base image matters and to find out how you can get started with UBI in your development projects.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F13%2Fhow-to-pick-the-right-container-base-image%2F&amp;#38;linkname=How%20to%20pick%20the%20right%20container%20base%20image" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F13%2Fhow-to-pick-the-right-container-base-image%2F&amp;#38;linkname=How%20to%20pick%20the%20right%20container%20base%20image" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F13%2Fhow-to-pick-the-right-container-base-image%2F&amp;#38;linkname=How%20to%20pick%20the%20right%20container%20base%20image" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F13%2Fhow-to-pick-the-right-container-base-image%2F&amp;#38;linkname=How%20to%20pick%20the%20right%20container%20base%20image" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F13%2Fhow-to-pick-the-right-container-base-image%2F&amp;#38;linkname=How%20to%20pick%20the%20right%20container%20base%20image" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F13%2Fhow-to-pick-the-right-container-base-image%2F&amp;#38;linkname=How%20to%20pick%20the%20right%20container%20base%20image" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F13%2Fhow-to-pick-the-right-container-base-image%2F&amp;#38;linkname=How%20to%20pick%20the%20right%20container%20base%20image" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F13%2Fhow-to-pick-the-right-container-base-image%2F&amp;#038;title=How%20to%20pick%20the%20right%20container%20base%20image" data-a2a-url="https://developers.redhat.com/blog/2021/04/13/how-to-pick-the-right-container-base-image/" data-a2a-title="How to pick the right container base image"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/13/how-to-pick-the-right-container-base-image/"&gt;How to pick the right container base image&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/qgk4rbd3QMg" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Picking the right container base image feels hard for a lot of people. Every major Linux distribution offers a base image. Open source projects for programming languages like Python, Ruby, and Node.js offer their own base images. Many open source projects and vendors also provide their own images for services like MariaDB, Redis, Elastic, and [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/13/how-to-pick-the-right-container-base-image/"&gt;How to pick the right container base image&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/04/13/how-to-pick-the-right-container-base-image/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">890697</post-id><dc:creator>Scott McCarty (fatherlinux)</dc:creator><dc:date>2021-04-13T13:05:32Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/04/13/how-to-pick-the-right-container-base-image/</feedburner:origLink></entry><entry><title>C# 9 new features for methods and functions</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/zZys6rABv3E/" /><category term=".NET" /><category term="C#" /><category term="Uncategorized" /><category term=".NET 5" /><category term="C# 9" /><category term="functions" /><category term="methods" /><author><name>Tom Deseyn</name></author><id>https://developers.redhat.com/blog/?p=873857</id><updated>2021-04-13T07:00:48Z</updated><published>2021-04-13T07:00:48Z</published><content type="html">&lt;p&gt;This is the third article in our C# 9 series. In the previous articles, we covered &lt;a target="_blank" rel="nofollow" href="/blog/2021/03/30/c-9-top-level-programs-and-target-typed-expressions/"&gt;top-level programs and target-typed expressions&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="/blog/2021/04/06/c-9-pattern-matching/"&gt;new features for pattern matching&lt;/a&gt;. In this article, we’ll look at new features for methods, anonymous functions, and local functions.&lt;/p&gt; &lt;h2&gt;Covariant return types&lt;/h2&gt; &lt;p&gt;When overriding base class members or implementing interfaces, C# 9 allows you to use a more specific return type:&lt;/p&gt; &lt;pre&gt;class Person { public virtual Person Clone() { ... } } class Student : Person { public override Student Clone() { ... } } &lt;/pre&gt; &lt;p&gt;In previous versions of C#, the return type had to match the base declaration. A cast was required in order to obtain the actual more specific type:&lt;/p&gt; &lt;pre&gt;Student clone = (Student)student.Clone(); &lt;/pre&gt; &lt;h2&gt;Static anonymous functions&lt;/h2&gt; &lt;p&gt;For a long time, C# has supported the declaration of anonymous functions using anonymous methods or lambda expressions:&lt;/p&gt; &lt;pre&gt;// Anonymous functions: // - C# 2.0: anonymous methods Func&amp;#60;string, int&amp;#62; = delegate(string arg) { return arg.Length; }; // - C# 3.0: lambda expressions Func&amp;#60;string, int&amp;#62; = arg =&amp;#62; arg.Length; &lt;/pre&gt; &lt;p&gt;Anonymous functions can use local variables. To disallow this, and require explicit passing of all arguments, we can now mark anonymous functions as &lt;code&gt;static&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;// error CS8820: static anonymous function references ‘offset’ int offset = 20; Func&amp;#60;string, int&amp;#62; d1 = static delegate(string arg) { return arg.Length + offset; }; Func&amp;#60;string, int&amp;#62; d2 = static arg =&amp;#62; arg.Length + offset; &lt;/pre&gt; &lt;h2&gt;Attributes on local functions&lt;/h2&gt; &lt;p&gt;C# 7 introduced local functions, which are defined in the calling method. C# 8 enhanced these local functions and permitted them to be marked as &lt;code&gt;static&lt;/code&gt; to disallow the use of local variables (similar to the previous section).&lt;/p&gt; &lt;p&gt;C# 9 makes it possible to add attributes to local functions. The following example applies the &lt;code&gt;DllImport&lt;/code&gt; attribute to a local function:&lt;/p&gt; &lt;pre&gt;public static void Terminate(this Process p) { const int SIGTERM = 15; kill(p.Id, SIGTERM); [DllImport("libc", SetLastError = true)] static extern int kill(int pid, int sig); } &lt;/pre&gt; &lt;h2&gt;Extended partial methods&lt;/h2&gt; &lt;p&gt;To facilitate customizing generated code, C# 3 introduced the concept of partial methods.&lt;/p&gt; &lt;p&gt;The generated C# code includes a method marked with &lt;code&gt;partial&lt;/code&gt; with no body. The body for the method is provided by the user in a separate file.&lt;/p&gt; &lt;p&gt;C# 3 doesn’t require the user to provide a body. When the code is compiled, the compiler uses the method that was provided by the user, or omits the calls if there is no such method.&lt;/p&gt; &lt;p&gt;Because providing the implementation is optional, partial methods are not allowed to have output parameters or non-void return types:&lt;/p&gt; &lt;pre&gt;// -- MyForm.generated.cs -- public partial class MyForm : Form { public MyForm() { // ... // generated code to initialize components. // ... OnComponentsInitialized(); } partial void OnComponentsInitialized(); } // -- MyForm.cs -- public partial class MyForm { partial void OnComponentsInitialized() { // user code } } &lt;/pre&gt; &lt;p&gt;C# 9 allows &lt;code&gt;partial&lt;/code&gt; methods to have a return type and output parameters. The compiler requires there to be an implementation. This extended kind of partial method must have an accessibility modifier, which is no longer limited to private scope.&lt;/p&gt; &lt;p&gt;This lets the user split the declaration of a method (the method signature) from its definition (the code).&lt;/p&gt; &lt;p&gt;Extended partial methods go hand-in-hand with another new C# compiler feature: &lt;em&gt;source generators&lt;/em&gt;. A source generator is code that runs during compilation to produce additional source code that gets compiled. You can learn more about source generators in &lt;a target="_blank" rel="nofollow" href="https://devblogs.microsoft.com/dotnet/introducing-c-source-generators/"&gt;Introducing C# Source Generators&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;As you probably guessed, a source generator is responsible for generating the implementation of partial methods. The following example shows a partial method that can cause a source generator to emit an implementation that is optimized for the regular expression provided in the &lt;code&gt;RegexGenerated&lt;/code&gt; attribute:&lt;/p&gt; &lt;pre&gt;[RegexGenerated("(dog|cat|fish)")] public partial bool IsPetMatch(string input); &lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This article covered new capabilities for methods and functions in C# 9. We learned that overridden methods can now return more specific types, anonymous methods can be marked &lt;code&gt;static&lt;/code&gt; to require passing in all parameters, and local functions can now have attributes. Finally, we looked at extended partial methods and how they are used with C# source generators.&lt;/p&gt; &lt;p&gt;C# 9 can be used with the &lt;a target="_blank" rel="nofollow" href="/blog/2020/12/22/net-5-0-now-available-for-red-hat-enterprise-linux-and-red-hat-openshift/"&gt;.NET 5 SDK&lt;/a&gt;, which is available on&lt;br /&gt; &lt;a target="_blank" rel="nofollow" href="/products/rhel/overview"&gt;Red Hat Enterprise Linux&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;, on &lt;a target="_blank" rel="nofollow" href="http://fedoraloves.net/"&gt;Fedora&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://dotnet.microsoft.com/download"&gt;from Microsoft for Windows, macOS, and other Linux distributions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F13%2Fc-9-new-features-for-methods-and-functions%2F&amp;#38;linkname=C%23%209%20new%20features%20for%20methods%20and%20functions" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F13%2Fc-9-new-features-for-methods-and-functions%2F&amp;#38;linkname=C%23%209%20new%20features%20for%20methods%20and%20functions" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F13%2Fc-9-new-features-for-methods-and-functions%2F&amp;#38;linkname=C%23%209%20new%20features%20for%20methods%20and%20functions" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F13%2Fc-9-new-features-for-methods-and-functions%2F&amp;#38;linkname=C%23%209%20new%20features%20for%20methods%20and%20functions" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F13%2Fc-9-new-features-for-methods-and-functions%2F&amp;#38;linkname=C%23%209%20new%20features%20for%20methods%20and%20functions" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F13%2Fc-9-new-features-for-methods-and-functions%2F&amp;#38;linkname=C%23%209%20new%20features%20for%20methods%20and%20functions" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F13%2Fc-9-new-features-for-methods-and-functions%2F&amp;#38;linkname=C%23%209%20new%20features%20for%20methods%20and%20functions" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F13%2Fc-9-new-features-for-methods-and-functions%2F&amp;#038;title=C%23%209%20new%20features%20for%20methods%20and%20functions" data-a2a-url="https://developers.redhat.com/blog/2021/04/13/c-9-new-features-for-methods-and-functions/" data-a2a-title="C# 9 new features for methods and functions"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/13/c-9-new-features-for-methods-and-functions/"&gt;C# 9 new features for methods and functions&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/zZys6rABv3E" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;This is the third article in our C# 9 series. In the previous articles, we covered top-level programs and target-typed expressions and new features for pattern matching. In this article, we’ll look at new features for methods, anonymous functions, and local functions. Covariant return types When overriding base class members or implementing interfaces, C# 9 [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/13/c-9-new-features-for-methods-and-functions/"&gt;C# 9 new features for methods and functions&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/04/13/c-9-new-features-for-methods-and-functions/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">873857</post-id><dc:creator>Tom Deseyn</dc:creator><dc:date>2021-04-13T07:00:48Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/04/13/c-9-new-features-for-methods-and-functions/</feedburner:origLink></entry><entry><title type="html">Headless eCommerce - Example headless architectures</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/nvFvbPaPew4/headless-ecommerce-example-headless-architectures.html" /><author><name>Eric D. Schabell</name></author><id>http://feedproxy.google.com/~r/schabell/jboss/~3/A556GImiPmU/headless-ecommerce-example-headless-architectures.html</id><updated>2021-04-13T05:00:00Z</updated><content type="html">Part 3 - Example headless architectures In our  from this series shared a look at the logical common architectural elements found in a headless e-commerce solution for retail stores. The process was laid out how we've approached the use case and how portfolio solutions are the base for researching a generic architectural blueprint. It continued by laying out the process of how we've approached the use case by researching successful customer portfolio solutions as the basis for a generic architectural blueprint. Having completed our discussions on the logical view of the blueprint, it's now time to look at a specific example. This article walks you through an example headless e-commerce platform scenario showing how expanding the previously discussed elements provides a blueprint for your own headless e-commerce scenarios. BLUEPRINTS REVIEW As mentioned before, the architectural details covered here are base on real solutions using open source technologies. The example scenario presented here is a generic common blueprint that was uncovered researching those solutions. It's our intent to provide a blueprint that provides guidance and not deep technical details. This section covers the visual representations as presented, but it's expected that they'll be evolving based on future research. There are many ways to represent each element in this architectural blueprint, but we've chosen a format that we hope makes it easy to absorb. Feel free to post comments at the bottom of this post, or  with your feedback. Now let's take a look at the details in this blueprint and outline the solution for two approaches to delivering a cloud-native approach. HEADLESS WITH LOCAL CONTAINER ARCHITECTURE The first of the two architecture examples focuses on two tasks within this architecture. First, the cloud-native approach to delivery using local container tooling and second, on the elements delivered to provide for a loosely coupled headless e-commerce platform experience. A close examination shows that we have a Developer collection of elements, one for the Dev infrastructure, and a final one on the right for the Test infrastructure hosted by a container platform. The rest of this section outlines each element shown and describes how a developer using local container tooling delivers from their development environment, through a development infrastructure on to the test infrastructure. The reader is left to work out the cycles needed to get from test to production. Starting with the developers collection of tools, we find everything needed for them to design, develop, and preview testing of their applications. There are runtimes, maven repository, source code management system most often git-based, and of course the container tooling. Note that there are several ways to trigger the push of new code to the dev infrastructure, using git hooks, maven plugins, or file uploads from the container tooling.  That previously mentioned push of the finished code kicks off a build in the dev CI/CD element to generate an image that's added to the image repository. From this image an instance is spun up in the dev infrastructure for testing and should it pass it's then tagged as tested and copied by the registry management element to the next infrastructure level. Incoming images for the test infrastructure are copied into the image registry for deployment into the test container platform. In this level we see some of the key elements in our headless e-commerce solution. In the lighter box we see frontend microservices, messaging, and integration data microservices. These are providing services to frontend applications, message transformation and delivery, and communications with data sources.  After that there are a few customer focused elements; customer brand adapter microservices, customer composite microservices, customer core microservices, and customer anti-corruption microservices. Each of these collections of services help support applications as they interact with customers in the e-commerce experience.  Finally, there are the integration microservices that ensure communication with other parts of the organisations backend systems and, in the example included here, with the testing interface. A tester is shown using api management to authorise and authenticate access to a web application that provides a test experience with the headless e-commerce deployment found on the test infrastructure. Next up, a look at the architectural solution with development teams using remote container tooling. HEADLESS WITH REMOTE CONTAINER ARCHITECTURE This second architecture example is presenting the cloud-native approach to delivery using remote container tooling, followed by the elements providing a loosely coupled headless e-commerce platform experience. First off let's define this remote container tooling and what it means. The difference when using remote container tooling is fully integrating with a container platform from the developer through to production. Local container tooling requires an integration point where you copy the tested application image using special tools from the developer infrastructure image registry to the container platform image registry.  Now that we're clear on the subject at hand, let's start once again on the right of the above architecture and explore what developers are using to design, develop, and preview testing of their applications. There are runtimes, maven repository, source code management system most often git-based, and of course the container tooling. This container tooling is specifically focused on a container platform and is using the OpenShift client tooling so that developers are working directly with a development cluster just like every level of the infrastructure through to production. This is shown in the above image as the developer infrastructure consists of a container platform and a container platform CI/CD. The developer still has options on how to trigger the push of new code to the dev infrastructure, using git hooks, maven plugins, or oc client tooling.  As a side note, it's also an option to place the above shown development infrastructure directly on the local machine of the developer. For examples of how this works, please explore the and some of the demo projects found on . When the developer pushes their code it's shown here heading to the container platform CI/CD where a source to image S2I workflow build process triggers. The CI/CD platform manages this build and if successful creates a development tagged image that's put into the container platform image registry. The development image is automatically deployed into the dev container platform and the developer can continue testing and development until it's ready for promotion to the next environment. Note developer access is shown here using API management as that's the same headless e-commerce application setup to be found in production. When all development testing has finished the CI/CD platform element tags the resulting image as testImage and it's pushed into the test container platform's image registry. This automatically deploys the headless e-commerce images to the test infrastructure and testing can proceed on the application and services as before. Again, we see some of the key elements of our headless e-commerce solution. In the lighter box we see frontend microservices, messaging, and integration data microservices. These are providing services to frontend applications, message transformation and delivery, and communications with data sources.  After that there are a few customer focused elements; customer brand adapter microservices, customer composite microservices, customer core microservices, and customer anti-corruption microservices. Each of these collections of services help support applications as they interact with customers in the e-commerce experience.  Finally, there are the integration microservices that ensure communication with other parts of the organisations backend systems and, in the example included here, with the testing interface. A tester is shown using api management to authorise and authenticate access to a web application that provides a test experience with the headless e-commerce deployment found on the test infrastructure.  Further deployment through to an acceptance and production infrastructure is similar to the process shown and described here above. For simplicity and to provide an overview of the solution we've chosen to model development to testing only. WHAT'S NEXT This was just a short overview of the common generic elements that make up our architecture blueprint for the headless e-commerce use case.  An overview of this series on the headless e-commerce portfolio architecture blueprint can be found here: 1. 2. 3. Catch up on any articles you missed by following one of the links above. This completes the series and we hope you enjoyed this architecture blueprint for headless e-commerce in retail. (Article co-authored by , Chief Architect Retail, Red Hat)&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/nvFvbPaPew4" height="1" width="1" alt=""/&gt;</content><dc:creator>Eric D. Schabell</dc:creator><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/A556GImiPmU/headless-ecommerce-example-headless-architectures.html</feedburner:origLink></entry><entry><title>Containerize and deploy Strapi applications on Kubernetes and Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/LW4jocGRXEk/" /><category term="Containers" /><category term="JavaScript" /><category term="Kubernetes" /><category term="Node.js" /><category term="containerization" /><category term="Deploying Strapi" /><category term="openshift" /><category term="Strapi" /><author><name>Joel Lord</name></author><id>https://developers.redhat.com/blog/?p=874347</id><updated>2021-04-09T07:00:16Z</updated><published>2021-04-09T07:00:16Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://strapi.io/"&gt;Strapi&lt;/a&gt; is the leading open-source headless content management system (CMS). It’s 100% &lt;a target="_blank" rel="nofollow" href="/topics/javascript"&gt;JavaScript&lt;/a&gt;, fully customizable, and takes a developer-first approach. Strapi provides you with an interface to create and manage all the resources for your website. You can then build a front end to connect to your Strapi API with your favorite tools and frameworks. Content editors can use the friendly administration panel to manage and distribute content. Strapi is also based on a plugin system, which makes the CMS flexible and extensible.&lt;/p&gt; &lt;p&gt;Once you&amp;#8217;ve built your resources with Strapi&amp;#8217;s administration panel and designed a nice front end to serve the content, you will need to deploy the application somewhere. This article shows you how to deploy a Strapi application on a &lt;a target="_blank" rel="nofollow" href="/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; or &lt;a target="_blank" rel="nofollow" href="/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt; cluster.&lt;/p&gt; &lt;h2&gt;Step 1: Set up the development environment&lt;/h2&gt; &lt;p&gt;To use Strapi in a containerized development environment, you will need three independent containers: One to run the database, another for Strapi, and one for the front end. This section shows you how to set up the three containers you will use in development.&lt;/p&gt; &lt;h3&gt;Initial setup&lt;/h3&gt; &lt;p&gt;The database and back-end servers must be able to communicate. You can use a Docker network for this communication. Create your network with the following command:&lt;/p&gt; &lt;pre&gt;$ docker network create strapi &lt;/pre&gt; &lt;p&gt;You will also need three folders to hold the data from your containers. Here is the command to create the &lt;code&gt;/data&lt;/code&gt;, &lt;code&gt;/app&lt;/code&gt;, and &lt;code&gt;/front&lt;/code&gt; folders:&lt;/p&gt; &lt;pre&gt;$ mkdir ./data &amp;#38;&amp;#38; mkdir ./app &amp;#38;&amp;#38; mkdir ./front &lt;/pre&gt; &lt;h3&gt;Create the database container&lt;/h3&gt; &lt;p&gt;To start a Strapi instance, you will need a database to persist your data. In this example, we&amp;#8217;ll use a MySQL database server running inside a container. This way, there is no need to go through the process of installing MySQL.&lt;/p&gt; &lt;p&gt;To run the server, you can use the &lt;code&gt;docker run&lt;/code&gt; command with the &lt;code&gt;-d&lt;/code&gt; argument to run in the background. Include the following parameters:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;i&gt;&lt;code&gt;--name&lt;/code&gt; to name the container.&lt;/i&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;-v&lt;/code&gt; to specify a folder to contain the data to reuse the next time you start the server.&lt;/li&gt; &lt;li&gt;&lt;code&gt;-e&lt;/code&gt; to set up the environment variables to configure the database.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The command to start the container should look like this:&lt;/p&gt; &lt;pre&gt;$ docker run --rm -d --name strapi-db -v $(pwd)/data:/var/lib/mysql:z --network=strapi -e MYSQL_DATABASE=strapi -e MYSQL_USER=strapi -e MYSQL_PASSWORD=strapi -e MYSQL_ROOT_PASSWORD=strapi-admin mysql:5.7 &lt;/pre&gt; &lt;p&gt;Note that we use the &lt;code&gt;--network&lt;/code&gt; parameter to connect the database container to the network we created earlier.&lt;/p&gt; &lt;p&gt;After executing this command, try a &lt;code&gt;docker ps&lt;/code&gt; to validate that the container has started.&lt;/p&gt; &lt;h3&gt;Create the back-end container&lt;/h3&gt; &lt;p&gt;Now that you&amp;#8217;ve configured the database, you can start your &lt;code&gt;strapi&lt;/code&gt; instance, which will run from a container. This time, you will use the &lt;code&gt;strapi/strapi&lt;/code&gt; base image. You can still use the &lt;code&gt;-d&lt;/code&gt; argument to run it in the background and &lt;code&gt;--name&lt;/code&gt; to name your container. Be sure to also add the Strapi container to the same network as the database.&lt;/p&gt; &lt;p&gt;You should also map your local &lt;code&gt;/app&lt;/code&gt; folder to &lt;code&gt;/srv/app&lt;/code&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Use the &lt;code&gt;-v&lt;/code&gt; parameter so that you can persist the files created by Strapi using a local folder on your machine.&lt;/li&gt; &lt;li&gt;Map a port on your operating system to access port 1337 inside the container. If you are using port 8080, the address to connect to the Strapi admin console will be &lt;code&gt;localhost:8080&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Configure Strapi to use the database you started in the previous step using environment variables.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Here is the command to start the Strapi back-end container:&lt;/p&gt; &lt;pre&gt;$ docker run --rm -d --name strapi-dev -p 8080:1337 -v $(pwd)/app:/srv/app:z --network=strapi -e DATABASE_CLIENT=mysql -e DATABASE_NAME=strapi -e DATABASE_HOST=strapi-db -e DATABASE_PORT=3306 -e DATABASE_USERNAME=strapi -e DATABASE_PASSWORD=strapi strapi/strapi &lt;/pre&gt; &lt;p&gt;If Strapi can&amp;#8217;t find any files in the local file system that you mapped, it will automatically create a new instance of a Strapi server. This can take a few minutes. You can use &lt;code&gt;docker logs&lt;/code&gt; to keep an eye on the application creation status:&lt;/p&gt; &lt;pre&gt;$ docker logs -f strapi-dev &lt;/pre&gt; &lt;p&gt;If you want to stop the logs in your console, enter &lt;b&gt;Ctrl-C&lt;/b&gt;.&lt;/p&gt; &lt;p&gt;Once you see a message stating that your Strapi server is started, you can go to &lt;a target="_blank" rel="nofollow" href="http://localhost:8080/admin"&gt;http://localhost:8080/admin&lt;/a&gt; to create your admin user.&lt;/p&gt; &lt;p&gt;After you&amp;#8217;ve created the admin user, go ahead and create a new content type and make it publicly available. For content to work with in the next step, create a &lt;b&gt;Content-Type&lt;/b&gt; for &lt;b&gt;Posts&lt;/b&gt;. It will have four fields: &lt;b&gt;title&lt;/b&gt;, &lt;b&gt;author&lt;/b&gt; (a relationship to &lt;b&gt;Users&lt;/b&gt;), &lt;b&gt;publish_date&lt;/b&gt;, and &lt;b&gt;content&lt;/b&gt;, as shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_893687" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2021/04/Screenshot_20210408_120444.png"&gt;&lt;img aria-describedby="caption-attachment-893687" class="wp-image-893687 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2021/04/Screenshot_20210408_120444-1024x553.png" alt="The Posts content type has four fields: Title, Author, Publish_date, and Content." width="640" height="346" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/04/Screenshot_20210408_120444-1024x553.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/04/Screenshot_20210408_120444-300x162.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/04/Screenshot_20210408_120444-768x415.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-893687" class="wp-caption-text"&gt;Figure 1: The new content type with four fields for posts.&lt;/p&gt;&lt;/div&gt; &lt;p style="padding-left: 40px"&gt;&lt;b&gt;Note&lt;/b&gt;: See &lt;a target="_blank" rel="nofollow" href="https://www.youtube.com/watch?v=VC9X9O5OFyc"&gt;this video&lt;/a&gt; from the &lt;a target="_blank" rel="nofollow" href="https://strapi.io"&gt;Strapi&lt;/a&gt; team for a full tutorial about creating new content types.&lt;/p&gt; &lt;h3&gt;Create the front-end container&lt;/h3&gt; &lt;p&gt;Next up, you will create a front end. This user interface (UI) will consist of a simple HTML file that fetches the Strapi application programming interface (API) data and displays it on the page.&lt;/p&gt; &lt;p&gt;We&amp;#8217;ll use a Nginx server to display the content. You can start the container similarly to how you started the other two. This time, map port 80 in the container to port 8888 on your local machine and mount the &lt;code&gt;/front&lt;/code&gt; folder to map to &lt;code&gt;/usr/share/nginx/html&lt;/code&gt; inside your container. The &lt;code&gt;/front&lt;/code&gt; folder is the default folder to serve files from with Nginx:&lt;/p&gt; &lt;pre&gt;$ docker run --rm -d --name strapi-front -p 8888:80 -v $(pwd)/front:/usr/share/nginx/html:z nginx:1.17 &lt;/pre&gt; &lt;p&gt;Now, go ahead and create your front-end application. You might use a React, VueJS, or Angular application, but we&amp;#8217;ll use a simple HTML file for this demo. The file will do a &lt;code&gt;fetch&lt;/code&gt; from the Strapi API to download the data and then create the necessary elements on the page using JavaScript.&lt;/p&gt; &lt;p&gt;The HTML page will have a single &lt;code&gt;div&lt;/code&gt; where the JavaScript code appends the API&amp;#8217;s content. Create the following &lt;code&gt;index.html&lt;/code&gt; file in the &lt;code&gt;/front&lt;/code&gt; folder:&lt;/p&gt; &lt;pre&gt;&amp;#60;body&amp;#62; &amp;#60;div id="content"&amp;#62;&amp;#60;/div&amp;#62; &amp;#60;/body&amp;#62; &lt;/pre&gt; &lt;p&gt;You will need to add a &lt;code&gt;script&lt;/code&gt; tag to include a configuration file, which will make it easier to overwrite your Strapi API location later. Add the following inside the &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&amp;#60;script type="text/javascript" src="config.js"&amp;#62; &lt;/pre&gt; &lt;p&gt;The &lt;code&gt;front/config.js&lt;/code&gt; file should create a global constant with the following configuration:&lt;/p&gt; &lt;pre&gt;const config = { BASE_URL: "http://localhost:8080" } &lt;/pre&gt; &lt;p&gt;Finally, in the &lt;code&gt;index.html&lt;/code&gt; file, add another &lt;code&gt;script&lt;/code&gt; tag that contains the code to download the content and display it on the page:&lt;/p&gt; &lt;pre&gt;window.addEventListener("DOMContentLoaded", e =&amp;#62; { console.log("Loading content from Strapi"); const BASE_URL = config.BASE_URL; const BLOG_POSTS_URL = `${BASE_URL}/posts`; fetch(BLOG_POSTS_URL).then(resp =&amp;#62; resp.json()).then(posts =&amp;#62; { for(let i = 0; i &amp;#60; posts.length; i++) { let postData = posts[i]; let post = document.createElement("div"); let title = document.createElement("h2"); title.innerText = postData.title; let author = document.createElement("h3"); author.innerText = `${postData.author.firstname} ${postData.author.lastname} -- ${postData.publish_date}`; let content = document.createElement("div"); content.innerText = postData.content; post.appendChild(title); post.appendChild(author); post.appendChild(content); document.querySelector("#content").appendChild(post); } }); }); &lt;/pre&gt; &lt;p&gt;Now that you&amp;#8217;ve created all the files go to &lt;a target="_blank" rel="nofollow" href="http://localhost:8888/"&gt;http://localhost:8888&lt;/a&gt; to see your application. You should see your fancy UI serving content from Strapi.&lt;/p&gt; &lt;h2&gt;Step 2: Set up the production environment&lt;/h2&gt; &lt;p&gt;When you are ready to deploy your application, you will need to create your own containers that contain all the necessary files and data. These containers will go live on the web.&lt;/p&gt; &lt;p&gt;For each container, you will need to create a Dockerfile. You will use the Dockerfiles to create your containers with the actual content. Then, you&amp;#8217;ll deploy the containers to Kubernetes or OpenShift.&lt;/p&gt; &lt;h3&gt;Create the database container&lt;/h3&gt; &lt;p&gt;There is a good chance that you already have a database in production, and you probably won&amp;#8217;t want to overwrite its contents. For this reason, you will use the same default MySQL image that you used in development for the production database. If you want to import the SQL content later, you can use Docker to run a &lt;code&gt;mysqldump&lt;/code&gt; command on your database:&lt;/p&gt; &lt;pre&gt;$ docker exec strapi-db /bin/bash -c 'mysqldump strapi -ustrapi -pstrapi' | tee strapi-db.sql &lt;/pre&gt; &lt;p&gt;This file will be imported into the production database later if it&amp;#8217;s needed.&lt;/p&gt; &lt;p style="padding-left: 40px"&gt;&lt;b&gt;Note&lt;/b&gt;: The &lt;code&gt;mysqldump&lt;/code&gt; command uses &lt;code&gt;tee&lt;/code&gt; to copy the contents to a file. If you don&amp;#8217;t have the &lt;code&gt;tee&lt;/code&gt; command, you can copy the &lt;code&gt;docker&lt;/code&gt; command&amp;#8217;s output into a file named &lt;code&gt;strapi-db.sql&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Create the back-end container&lt;/h3&gt; &lt;p&gt;Next, you will create a &lt;code&gt;Dockefile.back&lt;/code&gt; to build your container for the back end.&lt;/p&gt; &lt;p&gt;Start from the &lt;code&gt;strapi&lt;/code&gt; base image &lt;code&gt;FROM strapi/base&lt;/code&gt;. Change the working directory to &lt;code&gt;/opt/app&lt;/code&gt; and copy all the local files into the container. Next, expose port 1337 and set all your environment variables. Don&amp;#8217;t forget to add an environment variable for &lt;code&gt;NODE_ENV=production&lt;/code&gt;. Finally, execute &lt;code&gt;yarn build&lt;/code&gt; to build all the production resources and use the &lt;code&gt;CMD&lt;/code&gt; command to start the back end once the container is started.&lt;/p&gt; &lt;p style="padding-left: 40px"&gt;&lt;b&gt;Note&lt;/b&gt;: For more about using the Strapi base image, see the &lt;a target="_blank" rel="nofollow" href="https://github.com/strapi/strapi-docker#how-to-use-strapibase"&gt;Strapi documentation on GitHub&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;FROM strapi/base WORKDIR /opt/app COPY ./app/package.json ./ COPY ./app/yarn.lock ./ RUN yarn install COPY ./app . ENV NODE_ENV production ENV DATABASE_CLIENT=mysql ENV DATABASE_NAME=strapi ENV DATABASE_HOST=strapi-db ENV DATABASE_PORT=3306 ENV DATABASE_USERNAME=strapi ENV DATABASE_PASSWORD=strapi RUN yarn build EXPOSE 1337 CMD ["yarn", "start"] &lt;/pre&gt; &lt;h3&gt;Create the front-end container&lt;/h3&gt; &lt;p&gt;You&amp;#8217;ll have to do a bit of bash scripting to use an environment variable to specify your Strapi server&amp;#8217;s URL.&lt;/p&gt; &lt;p style="padding-left: 40px"&gt;&lt;b&gt;Note&lt;/b&gt;: See my &lt;a target="_blank" rel="nofollow" href="/blog/2021/03/04/building-rootless-containers-for-javascript-front-ends/"&gt;best practices for JavaScript front-end containers&lt;/a&gt; for more about using environment variables with front-end containers.&lt;/p&gt; &lt;p&gt;First, start with the &lt;code&gt;nginx:1.17&lt;/code&gt; base image and change the working directory to &lt;code&gt;/usr/share/nginx/html&lt;/code&gt;. In there, copy all the files from your local system into the container.&lt;/p&gt; &lt;p&gt;The next step involves using &lt;code&gt;sed&lt;/code&gt; to change the &lt;code&gt;BASE_URL&lt;/code&gt; value to &lt;code&gt;$BASE_URL&lt;/code&gt;. Then, you will pipe in the result to a new file called &lt;code&gt;config.new.js&lt;/code&gt; and rename the file to &lt;code&gt;config.js&lt;/code&gt;, overwriting the original.&lt;/p&gt; &lt;p&gt;The result inside the container is a new &lt;code&gt;config.js&lt;/code&gt; file that looks like the one below. Note that the original file in your local file system is left intact:&lt;/p&gt; &lt;pre&gt;const config = { BASE_URL: "$BASE_URL" } &lt;/pre&gt; &lt;p&gt;Finally, you will need to use &lt;code&gt;envsubst&lt;/code&gt; to change the value of &lt;code&gt;$BASE_URL&lt;/code&gt; to the environment variable&amp;#8217;s actual value. Make the following updates in the &lt;code&gt;ENTRYPOINT&lt;/code&gt;, so the changes will happen when someone issues a Docker run:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Use a &lt;code&gt;cat&lt;/code&gt; command to pipe the &lt;code&gt;config.js&lt;/code&gt; file into &lt;code&gt;envsubst&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Pipe the output to &lt;code&gt;tee&lt;/code&gt; to create a new &lt;code&gt;config.new.js&lt;/code&gt; file and rename the file to overwrite the previous one.&lt;/li&gt; &lt;li&gt;Use the&lt;code&gt;nginx -g 'daemon off;'&lt;/code&gt; command to start the Nginx server: &lt;pre&gt;FROM nginx:1.17 WORKDIR /usr/share/nginx/html COPY ./front/*.* ./ RUN sed s/BASE_URL\:\ \"[a-zA-Z0-9:\/]*\"/BASE_URL\:\ \"\$BASE_URL\"/g config.js &amp;#62; config.new.js &amp;#38;&amp;#38; mv config.new.js config.js ENTRYPOINT cat config.js | envsubst | tee config.new.js &amp;#38;&amp;#38; mv config.new.js config.js &amp;#38;&amp;#38; nginx -g 'daemon off;' &lt;/pre&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Updating the entry point instead of a &lt;code&gt;RUN&lt;/code&gt; lets you specify different values for the base URL according to where the container is running.&lt;/p&gt; &lt;h3&gt;Build the containers&lt;/h3&gt; &lt;p&gt;Now that you have all your Dockerfiles ready, you can build the containers and push them to your favorite image registry. Don&amp;#8217;t forget to change the name of your images to use your username for that registry:&lt;/p&gt; &lt;pre&gt;$ docker build -t $DOCKER_USERNAME/strapi-front -f Dockerfile.front . $ docker build -t $DOCKER_USERNAME/strapi-back -f Dockerfile.back . $ docker push $DOCKER_USERNAME/strapi-front $ docker push $DOCKER_USERNAME/strapi-back &lt;/pre&gt; &lt;h2&gt;Step 3: Package and run the application&lt;/h2&gt; &lt;p&gt;Now that you have containers with all of your code and data, you are ready to deploy the containers somewhere. We&amp;#8217;ll use Docker and Docker Compose to run the application and a Kubernetes or OpenShift cluster to deploy it.&lt;/p&gt; &lt;h3&gt;Package and run the application with Docker&lt;/h3&gt; &lt;p&gt;If you want to run this application, you can start all the containers in the same way you would in production.&lt;/p&gt; &lt;p&gt;The commands to start the containers are similar to those you used in development mode, but &lt;i&gt;with&lt;/i&gt; the mounted volumes and &lt;i&gt;without&lt;/i&gt; the environment variables. We handled the source code and environment variables in the Dockerfile. Note that we add an environment variable specifying the location of the Strapi API for starting the front end:&lt;/p&gt; &lt;pre&gt;$ docker run --rm -d --name strapi-db -v $(pwd)/data:/var/lib/mysql:z --network=strapi -e MYSQL_DATABASE=strapi -e MYSQL_USER=strapi -e MYSQL_PASSWORD=strapi -e MYSQL_ROOT_PASSWORD=strapi-admin mysql:5.7 $ docker run --rm -d --name strapi -p 1337:1337 --network=strapi $DOCKER_USERNAME/strapi-back $ docker run --rm -d --name strapi-front -p 8080:80 -e BASE_URL=http://localhost:1337 $DOCKER_USERNAME/strapi-front &lt;/pre&gt; &lt;h3&gt;Package and run the application with Docker Compose&lt;/h3&gt; &lt;p&gt;If you want to share your application code and configurations with anyone else, you could provide them with a &lt;code&gt;docker-compose.yaml&lt;/code&gt; file. This tool lets you manage multiple containers at once without multiple bash commands:&lt;/p&gt; &lt;pre&gt;version: '3' services: strapi-db: image: mysql:5.7 volumes: - ./data:/var/lib/mysql networks: - strapi strapi-back: image: $DOCKER_USERNAME/strapi-back ports: - '1337:1337' networks: - strapi strapi-front: image: $DOCKER_USERNAME/strapi-front ports: - '8080:80' environment: BASE_URL: http://localhost:1337 networks: strapi: &lt;/pre&gt; &lt;h2&gt;Step 4: Deploy the application&lt;/h2&gt; &lt;p&gt;Once you&amp;#8217;ve created all of your containers, you can deploy the application into a Kubernetes or OpenShift cluster. I&amp;#8217;ll show you how to do both.&lt;/p&gt; &lt;h3&gt;Deploy the application on Kubernetes&lt;/h3&gt; &lt;p&gt;Before deploying your application in a Kubernetes cluster, you will need to use YAML files to create all the necessary assets. For more details on each of these assets, see &lt;a target="_blank" rel="nofollow" href="http://kubernetesbyexample.com/"&gt;&lt;em&gt;Kubernetes by example&lt;/em&gt;&lt;/a&gt;. To test out the deployment, you can use a smaller version of Kubernetes to run locally on your own machine. I&amp;#8217;ve used &lt;a target="_blank" rel="nofollow" href="https://kubernetes.io/docs/tutorials/hello-minikube/"&gt;Minikube&lt;/a&gt; for the following examples.&lt;/p&gt; &lt;h4&gt;Deploying the database&lt;/h4&gt; &lt;p&gt;The setup for &lt;a target="_blank" rel="nofollow" href="https://kubernetesbyexample.com/pv/"&gt;persistent volumes&lt;/a&gt; (PVs) and persistent volume claims (PVCs) varies from one cloud provider to another. For this reason, the database in this example will not persist data. For more information about how to persist data, check your cloud provider&amp;#8217;s documentation.&lt;/p&gt; &lt;p&gt;For the database, we will need to create a &lt;a target="_blank" rel="nofollow" href="https://kubernetesbyexample.com/deployments/"&gt;deployment&lt;/a&gt;. You will start by creating a YAML file that describes your deployment. You can give it a name, and in the spec, you will create a template for the pods. Each pod will have a single container, which will be the ones that you&amp;#8217;ve pushed to your registry. Here is the deployment for this example (&lt;code&gt;deploy-db.yaml&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;apiVersion: apps/v1 kind: Deployment metadata: name: strapi-db spec: selector: matchLabels: component: db template: metadata: labels: component: db spec: containers: - name: strapi-db image: mysql:5.7 env: - name: MYSQL_DATABASE value: strapi - name: MYSQL_USER value: strapi - name: MYSQL_PASSWORD value: strapi - name: MYSQL_ROOT_PASSWORD value: strapi-admin &lt;/pre&gt; &lt;p&gt;Once you have your file, you can apply it to your cluster using &lt;code&gt;kubectl&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ kubectl apply -f ./deploy-db.yaml &lt;/pre&gt; &lt;h4&gt;Deploying the back end&lt;/h4&gt; &lt;p&gt;Your back end needs to be able to find the pods inside the cluster, so you will need to create a &lt;a target="_blank" rel="nofollow" href="https://kubernetesbyexample.com/services/"&gt;Service&lt;/a&gt; to expose each pod. We are using the defaults here, so you can use &lt;code&gt;kubectl&lt;/code&gt; to create this service:&lt;/p&gt; &lt;pre&gt;$ kubectl expose deployment strapi-db --port 3306 &lt;/pre&gt; &lt;p&gt;If you want to import data from your development environment SQL, you can run the following commands:&lt;/p&gt; &lt;pre&gt;$ kubectl cp ./strapi-db.sql $(kubectl get pod -l component=db | awk 'NR&amp;#62;1 {print $1}'):/tmp/strapi-db.sql $ kubectl exec -t $(kubectl get pod -l component=db | awk 'NR&amp;#62;1 {print $1}') -- /bin/bash -c 'mysql strapi -ustrapi -pstrapi &amp;#60; /tmp/strapi-db.sql' &lt;/pre&gt; &lt;p&gt;These commands copy the SQL file to the pods, then run a MySQL command to run it in the database.&lt;/p&gt; &lt;p&gt;You can also create your deployments for the back- and front-end portions of your application. The Strapi back end (&lt;code&gt;deploy-back.yaml&lt;/code&gt;) is the same as the database deployment, apart from the name, label, and container image:&lt;/p&gt; &lt;pre&gt;apiVersion: apps/v1 kind: Deployment metadata: name: strapi-back spec: selector: matchLabels: app: strapi component: back template: metadata: labels: app: strapi component: back spec: containers: - name: strapi-back image: joellord/strapi-back &lt;/pre&gt; &lt;h4&gt;Deploying the front end&lt;/h4&gt; &lt;p&gt;The front end (&lt;code&gt;deploy-front.yaml&lt;/code&gt;) uses a similar structure to the back end, but you also need to set the environment variable for the back end&amp;#8217;s &lt;code&gt;BASE_URL&lt;/code&gt;. For now, just set that variable&amp;#8217;s value to &lt;code&gt;/api&lt;/code&gt;. You also need to expose the container to port 80 so that it will be available to the outside world eventually:&lt;/p&gt; &lt;pre&gt;apiVersion: apps/v1 kind: Deployment metadata: name: strapi-front spec: selector: matchLabels: component: front template: metadata: labels: component: front spec: containers: - name: front image: joellord/strapi-front ports: - containerPort: 80 env: - name: BASE_URL value: /api &lt;/pre&gt; &lt;h4&gt;Create and expose the application services in your cluster&lt;/h4&gt; &lt;p&gt;Now that you&amp;#8217;ve created your deployment files, you can apply them to your cluster and create the services for each one:&lt;/p&gt; &lt;pre&gt;$ kubectl apply -f ./deploy-back.yaml $ kubectl apply -f ./deploy-front.yaml $ kubectl expose deployment strapi-back --port 1337 $ kubectl expose deployment strapi-front --port 80 &lt;/pre&gt; &lt;p&gt;Everything is now running inside your cluster. You only need to expose the front- and back-end services to the outside world. For this, you will use an &lt;a target="_blank" rel="nofollow" href="https://kubernetes.io/docs/concepts/services-networking/ingress/"&gt;ingress&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Here, you will create an ingress that exposes the front end as the default service. Any incoming request to your cluster then goes to the front end by default. You will also add a rule that redirects any traffic sent to  &lt;code&gt;/api/*&lt;/code&gt; to the back-end service. The request will be rewritten when it&amp;#8217;s sent to that service to remove the &lt;code&gt;/api&lt;/code&gt; part of the URL. We&amp;#8217;ll add a Nginx annotation in the metadata to effect this change. Here is the &lt;code&gt;ingress.yaml&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: main-ingress annotations: nginx.ingress.kubernetes.io/rewrite-target: /$2 spec: rules: - http: paths: - path: /api(/|$)(.*) pathType: Prefix back end: service: name: strapi-back port: number: 1337 - path: /()(.*) pathType: Prefix backend: service: name: strapi-front port: number: 80 &lt;/pre&gt; &lt;p&gt;Go ahead and apply this file to your cluster. You might need to enable the following add-on if you are using Minikube and have never used an ingress before:&lt;/p&gt; &lt;pre&gt;# For minikube users $ minikube addons enable ingress $ kubectl apply -f ./ingress.yaml &lt;/pre&gt; &lt;p&gt;You now have everything needed to run your Strapi application in a Kubernetes cluster. Point your browser to the cluster URL, and you should see the full application running in your cluster. If you&amp;#8217;re using Minikube, you can use the command &lt;code&gt;minikube ip&lt;/code&gt; to get your cluster&amp;#8217;s address.&lt;/p&gt; &lt;h3&gt;Deploy the application on OpenShift&lt;/h3&gt; &lt;p&gt;Deploying the application on OpenShift can be even easier than deploying in a Kubernetes cluster.&lt;/p&gt; &lt;p&gt;In this case, you can test out your deployment with the &lt;a target="_blank" rel="nofollow" href="/developer-sandbox"&gt;Developer Sandbox&lt;/a&gt;, which gives you access to an OpenShift cluster for free for 14 days.&lt;/p&gt; &lt;h4&gt;Create the deployment from an image&lt;/h4&gt; &lt;p&gt;The command-line interface (CLI) tool that you use to manage your cluster (&lt;code&gt;oc&lt;/code&gt;) can create a deployment directly from an image. To deploy your application, enter:&lt;/p&gt; &lt;pre&gt;$ oc new-app mysql:5.7 MYSQL_USER=strapi MYSQL_PASSWORD=strapi MYSQL_DATABASE=strapi -l component=db --name strapi-db $ oc new-app joellord/strapi-back-openshift --name strapi-back $ oc new-app joellord/strapi-front-openshift --name strapi-front &lt;/pre&gt; &lt;p&gt;&lt;b&gt;Note&lt;/b&gt;: Images on OpenShift need to be run as a non-root user. See my &lt;a target="_blank" rel="nofollow" href="https://github.com/joellord/frontend-containers"&gt;guide to front-end best practices&lt;/a&gt; for more about non-root images. The Dockerfiles used for this project can be found in the &lt;a target="_blank" rel="nofollow" href="https://github.com/joellord/strapi"&gt;Git repository for this article&lt;/a&gt; under &lt;code&gt;Dockerfile.rootless.back&lt;/code&gt; and &lt;code&gt;Dockerfile.rootless.front&lt;/code&gt;.&lt;/p&gt; &lt;div&gt; &lt;div&gt;Seed your database with the data that you exported earlier. This data should be in your current working directory and have the name &lt;code&gt;strapi-db.sql&lt;/code&gt;.&lt;/div&gt; &lt;pre&gt;$ oc exec -it $(oc get pods -l component=db | awk 'NR&amp;#62;1 {print $1}') -c strapi-db -- bash -c 'mysql -ustrapi -pstrapi strapi' &amp;#60; ./strapi-db.sql&lt;/pre&gt; &lt;/div&gt; &lt;h4&gt;Expose the application&lt;/h4&gt; &lt;p&gt;Next, you&amp;#8217;ll want to expose the application to the outside world. OpenShift has a neat object for this purpose, &lt;code&gt;Route&lt;/code&gt;, which you can use from the OpenShift CLI. Use the &lt;code&gt;oc expose&lt;/code&gt; command to expose the back- and front-end to the outside world:&lt;/p&gt; &lt;pre&gt;$ oc expose service strapi-back $ oc expose service strapi-front --port=8080 &lt;/pre&gt; &lt;p&gt;Now that your back end is exposed, you will need to set your front-end environment variable to the back-end route. Start by getting the public route for the Strapi API:&lt;/p&gt; &lt;pre&gt;$ oc get routes &lt;/pre&gt; &lt;p&gt;You should see all the routes that you&amp;#8217;ve created so far. You can store the back-end route in a variable and then set it as an environment variable using &lt;code&gt;oc set env&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ export BACKEND_ROUTE=$(oc get routes | grep strapi-back | awk '{print $2}') $ oc set env deployment/strapi-front BASE_URL=http://$BACKEND_ROUTE &lt;/pre&gt; &lt;p&gt;You can now access your Strapi application using the route for the &lt;code&gt;strapi-front&lt;/code&gt; service.&lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;When you are ready to put your Strapi application in production, the first step will be to containerize your whole setup. Once you have that done, you can deploy those containers in Kubernetes. You&amp;#8217;ve also seen how easy it is to deploy a Strapi application to OpenShift.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F09%2Fcontainerize-and-deploy-strapi-applications-on-kubernetes-and-red-hat-openshift%2F&amp;#38;linkname=Containerize%20and%20deploy%20Strapi%20applications%20on%20Kubernetes%20and%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F09%2Fcontainerize-and-deploy-strapi-applications-on-kubernetes-and-red-hat-openshift%2F&amp;#38;linkname=Containerize%20and%20deploy%20Strapi%20applications%20on%20Kubernetes%20and%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F09%2Fcontainerize-and-deploy-strapi-applications-on-kubernetes-and-red-hat-openshift%2F&amp;#38;linkname=Containerize%20and%20deploy%20Strapi%20applications%20on%20Kubernetes%20and%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F09%2Fcontainerize-and-deploy-strapi-applications-on-kubernetes-and-red-hat-openshift%2F&amp;#38;linkname=Containerize%20and%20deploy%20Strapi%20applications%20on%20Kubernetes%20and%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F09%2Fcontainerize-and-deploy-strapi-applications-on-kubernetes-and-red-hat-openshift%2F&amp;#38;linkname=Containerize%20and%20deploy%20Strapi%20applications%20on%20Kubernetes%20and%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F09%2Fcontainerize-and-deploy-strapi-applications-on-kubernetes-and-red-hat-openshift%2F&amp;#38;linkname=Containerize%20and%20deploy%20Strapi%20applications%20on%20Kubernetes%20and%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F09%2Fcontainerize-and-deploy-strapi-applications-on-kubernetes-and-red-hat-openshift%2F&amp;#38;linkname=Containerize%20and%20deploy%20Strapi%20applications%20on%20Kubernetes%20and%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F09%2Fcontainerize-and-deploy-strapi-applications-on-kubernetes-and-red-hat-openshift%2F&amp;#038;title=Containerize%20and%20deploy%20Strapi%20applications%20on%20Kubernetes%20and%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2021/04/09/containerize-and-deploy-strapi-applications-on-kubernetes-and-red-hat-openshift/" data-a2a-title="Containerize and deploy Strapi applications on Kubernetes and Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/09/containerize-and-deploy-strapi-applications-on-kubernetes-and-red-hat-openshift/"&gt;Containerize and deploy Strapi applications on Kubernetes and Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/LW4jocGRXEk" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Strapi is the leading open-source headless content management system (CMS). It’s 100% JavaScript, fully customizable, and takes a developer-first approach. Strapi provides you with an interface to create and manage all the resources for your website. You can then build a front end to connect to your Strapi API with your favorite tools and frameworks. [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/09/containerize-and-deploy-strapi-applications-on-kubernetes-and-red-hat-openshift/"&gt;Containerize and deploy Strapi applications on Kubernetes and Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/04/09/containerize-and-deploy-strapi-applications-on-kubernetes-and-red-hat-openshift/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">874347</post-id><dc:creator>Joel Lord</dc:creator><dc:date>2021-04-09T07:00:16Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/04/09/containerize-and-deploy-strapi-applications-on-kubernetes-and-red-hat-openshift/</feedburner:origLink></entry><entry><title>What’s happening in the Node.js community</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/QDm6YjHifkE/" /><category term="JavaScript" /><category term="Node.js" /><category term="Open source" /><category term="Node.js Next 10 Survey" /><category term="Node.js package maintenance" /><category term="Node.js runtime features" /><author><name>Bethany Griggs</name></author><id>https://developers.redhat.com/blog/?p=879727</id><updated>2021-04-08T07:00:27Z</updated><published>2021-04-08T07:00:27Z</published><content type="html">&lt;p&gt;Curious about what’s going on in the &lt;a target="_blank" rel="nofollow" href="/topics/nodejs/"&gt;Node.js&lt;/a&gt; community?&lt;/p&gt; &lt;p&gt;Node.js 16 will be released in April 2021 and promoted to long-term support in October 2021. We’re also rapidly approaching the end-of-life date for Node.js 10. After April 2021, there will be no further patches or security fixes made available for the Node.js 10 release line. If you haven’t already, you should plan to upgrade to Node.js 12 or Node.js 14 as soon as possible. See the &lt;a href="https://github.com/nodejs/release#release-schedule"&gt;Node.js release schedule&lt;/a&gt; in Figure 1.&lt;/p&gt; &lt;p&gt;&lt;img class="wp-image-879737 size-large aligncenter" src="https://developers.redhat.com/blog/wp-content/uploads/2021/03/Screenshot-2021-03-09-at-11.23.48-e1615289135331-1024x532.png" alt="Node.js release timeline spanning October 2020 to January 2023." width="640" height="333" srcset="https://developers.redhat.com/blog/wp-content/uploads/2021/03/Screenshot-2021-03-09-at-11.23.48-e1615289135331-1024x532.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2021/03/Screenshot-2021-03-09-at-11.23.48-e1615289135331-300x156.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2021/03/Screenshot-2021-03-09-at-11.23.48-e1615289135331-768x399.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;br /&gt; Figure 1: An overview of the Node.js release timeline.&lt;/p&gt; &lt;h2&gt;New features in Node.js 15&lt;/h2&gt; &lt;p&gt;The “current” release line, Node.js 15, picks up the new features that are contributed to the runtime first. Features now available in Node.js 15 include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/nodejs/node/pull/36729"&gt;&lt;code&gt;crypto.randomUUID()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/nodejs/node/pull/37179"&gt;&lt;code&gt;fsPromises.watch()&lt;/code&gt;&lt;/a&gt;, an alternative version of &lt;code&gt;fs.watch()&lt;/code&gt; that returns an &lt;code&gt;AsyncIterator&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/nodejs/node/pull/37155"&gt;New &lt;code&gt;perf_hooks.createHistogram()&lt;/code&gt; API&lt;/a&gt; for creating histogram instances that allow user recording&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/nodejs/node/pull/37117"&gt;npm 7.5&lt;/a&gt;, including the new &lt;code&gt;npm diff&lt;/code&gt; command&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/nodejs/node/pull/37362"&gt;Support for source maps&lt;/a&gt; has graduated from experimental status to stable (proposed by Benjamin Coe)&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Hot topics in the Node.js community&lt;/h2&gt; &lt;p&gt;The following issues have sparked discussion in the Node.js community recently:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/nodejs/node/issues/37309"&gt;Work progressing toward producing native Node.js binaries for Apple Silicon&lt;/a&gt;, to be distributed as a single “fat” (multi-architecture) binary for macOS&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/nodejs/node/issues/19393#"&gt;Renewed discussion around including &lt;code&gt;fetch()&lt;/code&gt; or a &lt;code&gt;fetch()&lt;/code&gt;-like API in Node.js core&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/nodejs/node/issues/35286#"&gt;A proposal to promote the experimental APIs &lt;code&gt;AsyncResource&lt;/code&gt; and &lt;code&gt;AsyncLocalStorage&lt;/code&gt; to stable status&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt; The Node.js package maintenance ecosystem&lt;/h2&gt; &lt;p&gt;The Node.js Package Maintenance Working Group aims to help maintainers in a number of ways. Two active efforts are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Encouraging the publishing of package support information&lt;/strong&gt;: Publishing package support information helps maintainers set expectations in terms of supported Node.js versions, general support availability, and the backing behind a given package. The Working Group has defined the recommended metadata in &lt;a target="_blank" rel="nofollow" href="https://github.com/nodejs/package-maintenance/blob/main/docs/PACKAGE-SUPPORT.md"&gt;&lt;code&gt;PACKAGE-SUPPORT.md&lt;/code&gt;&lt;/a&gt;. New this month: The addition of a &lt;code&gt;create&lt;/code&gt; command to the &lt;a target="_blank" rel="nofollow" href="https://github.com/pkgjs/support"&gt;support&lt;/a&gt; tool, which makes it easier for maintainers to add this metadata to their packages. &lt;code&gt;npx @pkgjs/support create&lt;/code&gt; will guide you through adding the recommended metadata to your package. The &lt;a target="_blank" rel="nofollow" href="https://github.com/nodeshift/nodeshift"&gt;Nodeshift project&lt;/a&gt; recently added package support information to our modules. You can read more about our experience in &lt;a target="_blank" rel="nofollow" href="/blog/2021/02/10/add-standardized-support-information-to-your-node-js-modules"&gt;this article&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;The wiby testing tool&lt;/strong&gt;: The Working Group continues to develop wiby (“Will I break you?”). Still in early development, this tool helps package maintainers test whether changes in their packages break other packages that depend on them. If you’re interested in module testing or you’re a module maintainer wanting to test the impact of your changes on your downstream dependents, you can watch a &lt;a target="_blank" rel="nofollow" href="https://youtu.be/m4SMPUshtzY?t=47"&gt;demo&lt;/a&gt; and/or follow the progress in the &lt;a target="_blank" rel="nofollow" href="https://github.com/pkgjs/wiby"&gt;GitHub repository&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;The next 10 years of Node.js&lt;/h2&gt; &lt;p&gt;The Node.js project is documenting what we think is important to make the next 10 years of Node.js as successful as the first 10 years. The &lt;a target="_blank" rel="nofollow" href="https://github.com/nodejs/next-10"&gt;Next-10&lt;/a&gt; effort is focused on defining the project’s technical values and constituencies to set the foundation for future discussions. We’ve had many conversations and documented our initial thoughts, but now we need your help. The project has launched a survey to confirm that these values and constituencies align with our users&amp;#8217; needs. You can help guide the future of Node.js by taking part in the &lt;a target="_blank" rel="nofollow" href="https://www.surveymonkey.com/r/8PFGKV5"&gt;survey&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Upcoming virtual events&lt;/h2&gt; &lt;p&gt;Although we’ve been unable to meet in person over the past year, the Node.js community is still getting together at virtual events. Upcoming events include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://openjsf.org/openjs-world-2021/"&gt;OpenJS World&lt;/a&gt; (June 2, 2021)&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://www.nodeconfremote.com/"&gt;NodeConf Remote&lt;/a&gt; (October 18-21, 2021)&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Stay up to date on Node.js&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="/topics/nodejs"&gt;Node.js on Red Hat Developer&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://developer.ibm.com/languages/node-js/"&gt;Node.js on IBM Developer&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://nodejs.org/en/blog/"&gt;The Node.js project blog&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F08%2Fwhats-happening-in-the-node-js-community%2F&amp;#38;linkname=What%E2%80%99s%20happening%20in%20the%20Node.js%20community" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F08%2Fwhats-happening-in-the-node-js-community%2F&amp;#38;linkname=What%E2%80%99s%20happening%20in%20the%20Node.js%20community" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F08%2Fwhats-happening-in-the-node-js-community%2F&amp;#38;linkname=What%E2%80%99s%20happening%20in%20the%20Node.js%20community" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F08%2Fwhats-happening-in-the-node-js-community%2F&amp;#38;linkname=What%E2%80%99s%20happening%20in%20the%20Node.js%20community" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F08%2Fwhats-happening-in-the-node-js-community%2F&amp;#38;linkname=What%E2%80%99s%20happening%20in%20the%20Node.js%20community" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F08%2Fwhats-happening-in-the-node-js-community%2F&amp;#38;linkname=What%E2%80%99s%20happening%20in%20the%20Node.js%20community" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F08%2Fwhats-happening-in-the-node-js-community%2F&amp;#38;linkname=What%E2%80%99s%20happening%20in%20the%20Node.js%20community" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F08%2Fwhats-happening-in-the-node-js-community%2F&amp;#038;title=What%E2%80%99s%20happening%20in%20the%20Node.js%20community" data-a2a-url="https://developers.redhat.com/blog/2021/04/08/whats-happening-in-the-node-js-community/" data-a2a-title="What’s happening in the Node.js community"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/08/whats-happening-in-the-node-js-community/"&gt;What&amp;#8217;s happening in the Node.js community&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/QDm6YjHifkE" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Curious about what’s going on in the Node.js community? Node.js 16 will be released in April 2021 and promoted to long-term support in October 2021. We’re also rapidly approaching the end-of-life date for Node.js 10. After April 2021, there will be no further patches or security fixes made available for the Node.js 10 release line. [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/08/whats-happening-in-the-node-js-community/"&gt;What&amp;#8217;s happening in the Node.js community&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/04/08/whats-happening-in-the-node-js-community/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">879727</post-id><dc:creator>Bethany Griggs</dc:creator><dc:date>2021-04-08T07:00:27Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/04/08/whats-happening-in-the-node-js-community/</feedburner:origLink></entry><entry><title>Build even faster Quarkus applications with fast-jar</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/l3G5vq2brYE/" /><category term="Containers" /><category term="Java" /><category term="Kubernetes" /><category term="Quarkus" /><category term="cloud native java" /><category term="fast-jar" /><category term="Java performance" /><author><name>Daniel Oh</name></author><id>https://developers.redhat.com/blog/?p=884257</id><updated>2021-04-08T07:00:05Z</updated><published>2021-04-08T07:00:05Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt; is already fast, but what if you could make &lt;a target="_blank" rel="nofollow" href="/blog/2021/02/11/enhancing-the-development-loop-with-quarkus-remote-development/"&gt;inner loop development&lt;/a&gt; with the supersonic, subatomic &lt;a target="_blank" rel="nofollow" href="/topics/enterprise-java"&gt;Java&lt;/a&gt; framework even faster? Quarkus 1.5 introduced &lt;code&gt;fast-jar&lt;/code&gt;, a new packaging format that supports faster startup times. Starting in Quarkus 1.12, this great feature became the default packaging format for Quarkus applications. This article introduces you to the &lt;code&gt;fast-jar&lt;/code&gt; format and how it works.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: The &lt;a target="_blank" rel="nofollow" href="https://www.jrebel.com/resources/java-developer-productivity-report-2021"&gt;ninth annual global Java developer productivity report&lt;/a&gt; found that more developers are implementing business applications with &lt;a target="_blank" rel="nofollow" href="/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt;. Quarkus&amp;#8217;s support for live coding with fast startup and response times lets developers focus more on business logic implementations rather than wasting time on jobs such as recompiling and redeploying code and continuously restarting the runtime environment.&lt;/p&gt; &lt;h2&gt;The custom class loader&lt;/h2&gt; &lt;p&gt;To understand &lt;code&gt;fast-jar&lt;/code&gt;&amp;#8216;s secret solution, you need to understand the purpose of the Java class loader and what it processes when a Java application starts up. The Java class loader dynamically loads Java classes into the Java Virtual Machine (JVM) in a Java Runtime Environment (JRE). The Java class loader handles these functions so that the Java runtime doesn&amp;#8217;t need to know where the files and file systems are. Unfortunately, the class loader loads slower for Java applications with more dependencies. The reason is that the class loader typically takes the O(n) Big O notation on the number of Java application dependencies.&lt;/p&gt; &lt;p&gt;Quarkus&amp;#8217;s &lt;code&gt;fast-jar&lt;/code&gt; format solves this problem! When you create an application using the &lt;code&gt;fast-jar&lt;/code&gt; format, Quarkus uses a custom &lt;code&gt;ClassLoader&lt;/code&gt; that already knows the entire classpath when the application is built. The &lt;code&gt;ClassLoader&lt;/code&gt; indexes the location of classes and resources that are written at build time, and the location is read at startup time.&lt;/p&gt; &lt;p&gt;By following the next steps, you can learn for yourself the differences between the legacy JAR format and the new &lt;code&gt;fast-jar&lt;/code&gt; format.&lt;/p&gt; &lt;h2&gt;Step 1: Create two Quarkus projects with multiple extensions&lt;/h2&gt; &lt;p&gt;First, use a Maven plugin to scaffold a new project based on Quarkus 1.11.6.Final, which uses the legacy JAR packaging format:&lt;/p&gt; &lt;pre&gt;$ mvn io.quarkus:quarkus-maven-plugin:1.11.6.Final:create \     -DprojectGroupId=org.acme \    -DprojectArtifactId=getting-legacyjar-started \    -DclassName="org.acme.getting.started.GreetingResource" \    -Dextensions="infinispan-client,rest-client,openshift, resteasy-jackson" \    -Dpath="/hello" &lt;/pre&gt; &lt;p&gt;This command generates a &lt;code&gt;getting-legacyjar-started&lt;/code&gt; directory that pulls down &lt;code&gt;infinispan-client&lt;/code&gt;, &lt;code&gt;rest-client&lt;/code&gt;, &lt;code&gt;openshift&lt;/code&gt;, and &lt;code&gt;resteasy-jackson&lt;/code&gt; extensions into the new Quarkus project.&lt;/p&gt; &lt;p&gt;Next, create another project based on Quarkus 1.12.2.Final, with the new &lt;code&gt;fast-jar&lt;/code&gt; format:&lt;/p&gt; &lt;pre&gt;$ mvn io.quarkus:quarkus-maven-plugin:1.12.2.Final:create \    -DprojectGroupId=org.acme \    -DprojectArtifactId=getting-fastjar-started \   -DclassName="org.acme.getting.started.GreetingResource" \    -Dextensions="infinispan-client,rest-client,openshift, resteasy-jackson" \    -Dpath="/hello"&lt;/pre&gt; &lt;p&gt;This command generates a &lt;code&gt;getting-fastjar-started&lt;/code&gt; directory that includes the same extensions, but uses the &lt;code&gt;fast-jar&lt;/code&gt; packaging format.&lt;/p&gt; &lt;h2&gt;Step 2: Package the applications to compare formats&lt;/h2&gt; &lt;p&gt;Next, we&amp;#8217;ll package the applications to compare how differently Quarkus generates classes and resources using the legacy and &lt;code&gt;fast-jar&lt;/code&gt; packaging formats. Package the legacy JAR application first, using the following Maven command:&lt;/p&gt; &lt;pre&gt;$ mvn package -f getting-legacyjar-started&lt;/pre&gt; &lt;p&gt;The output should end with &lt;code&gt;BUILD SUCCESS&lt;/code&gt;. Then, the runnable JAR will be packaged directly in the target directory where other resources such as &lt;code&gt;lib&lt;/code&gt; and &lt;code&gt;classes&lt;/code&gt; are also created:&lt;/p&gt; &lt;pre&gt;$ ls -al getting-legacyjar-started/target             ... drwxr-xr-x   5 danieloh  staff     160 Mar 15 00:31 classes drwxr-xr-x  67 danieloh  staff    2144 Mar 15 08:35 lib -rw-r--r--   1 danieloh  staff  249897 Mar 15 08:35 getting-legacyjar-started-1.0.0-SNAPSHOT-runner.jar ... &lt;/pre&gt; &lt;p&gt;Now, package the &lt;code&gt;fast-jar&lt;/code&gt; application:&lt;/p&gt; &lt;pre&gt;$ mvn package -f getting-fastjar-started&lt;/pre&gt; &lt;p&gt;Once the build completes, you will find a new self-contained &lt;code&gt;quarkus-app&lt;/code&gt; folder in the target directory:&lt;/p&gt; &lt;pre&gt;$ ls -al getting-fastjar-started/target/quarkus-app         ... drwxr-xr-x  3 danieloh  staff   96 Mar 15 14:25 app drwxr-xr-x  4 danieloh  staff  128 Mar 15 14:25 lib drwxr-xr-x  4 danieloh  staff  128 Mar 15 14:25 quarkus -rw-r--r--  1 danieloh  staff  621 Mar 15 14:26 quarkus-run.jar ...&lt;/pre&gt; &lt;h2&gt;Step 3: Compare the application startup times&lt;/h2&gt; &lt;p&gt;Now, let’s run both applications with the packaged JAR file to see how quickly each one starts. Run the &lt;code&gt;legacy-jar&lt;/code&gt; application first:&lt;/p&gt; &lt;pre&gt;$ java -jar getting-legacyjar-started/target/getting-legacyjar-started-1.0.0-SNAPSHOT-runner.jar&lt;/pre&gt; &lt;p&gt;Once the application starts, you will see 1.276 seconds as the boot time, as shown below (the elapsed time could be a bit different depending on your environment):&lt;/p&gt; &lt;pre&gt;INFO  [io.quarkus] (main) getting-legacyjar-started 1.0.0-SNAPSHOT on JVM (powered by Quarkus 1.11.6.Final) started in 1.276s. Listening on: http://0.0.0.0:8080 &lt;/pre&gt; &lt;p&gt;To do a quick sanity test, you can access the RESTful API using a &lt;code&gt;curl&lt;/code&gt; command. Then, you will see the following output:&lt;/p&gt; &lt;pre&gt;$ curl &lt;a target="_blank" rel="nofollow" href="http://localhost:8080/hello"&gt;http://localhost:8080/hello&lt;/a&gt; Hello RESTEasy &lt;/pre&gt; &lt;p&gt;Stop the development mode by pressing &lt;b&gt;CTRL + C&lt;/b&gt; on your keyboard. Then, run the &lt;code&gt;fast-jar&lt;/code&gt; application:&lt;/p&gt; &lt;pre&gt;$ java -jar getting-fastjar-started/target/quarkus-app/quarkus-run.jar &lt;/pre&gt; &lt;p&gt;Once the application starts, you will see 0.909 seconds as the boot time, as shown below (the elapsed time could be a bit different depending on your environment):&lt;/p&gt; &lt;pre&gt;INFO  [io.quarkus] (main) getting-fastjar-started 1.0.0-SNAPSHOT on JVM (powered by Quarkus 1.12.2.Final) started in 0.909s. Listening on: http://0.0.0.0:8080 &lt;/pre&gt; &lt;p&gt;The new &lt;code&gt;fast-jar&lt;/code&gt; custom &lt;code&gt;ClassLoader&lt;/code&gt; delivers a startup time that is 360 milliseconds faster than the legacy JAR application. When you access the endpoint (&lt;code&gt; /hello&lt;/code&gt;), you will have the same output (&lt;code&gt;Hello RESTEasy&lt;/code&gt;) as the legacy JAR application.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;fast-jar&lt;/code&gt; format allows the default &lt;code&gt;ClassLoader&lt;/code&gt; to keep a minimum number of JARs open for fitting in a container-layering architecture. It also doesn’t need to look up the entire classpath for missing resources in known directories such as &lt;code&gt;META-INF/services&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, you learned why applications packaged with &lt;code&gt;fast-jar&lt;/code&gt; are faster than those packaged with Quarkus&amp;#8217;s legacy JAR format. We also did a quick exercise so you could compare the startup times for yourself.&lt;/p&gt; &lt;p&gt;While we didn&amp;#8217;t explore this option, you might have almost the same startup time if you run both applications in development mode because development mode doesn’t use a JAR file for packaging. This enhancement is intended for a production environment.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;fast-jar&lt;/code&gt; format is useful for applications with many extensions and dependencies, and the advantages are even greater for applications deployed to a &lt;a target="_blank" rel="nofollow" href="/topics/containers"&gt;container&lt;/a&gt; environment like &lt;a target="_blank" rel="nofollow" href="/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;. Visit the Quarkus landing page to &lt;a target="_blank" rel="nofollow" href="/products/quarkus/getting-started"&gt;get started with your next Quarkus journey&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F08%2Fbuild-even-faster-quarkus-applications-with-fast-jar%2F&amp;#38;linkname=Build%20even%20faster%20Quarkus%20applications%20with%20fast-jar" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F08%2Fbuild-even-faster-quarkus-applications-with-fast-jar%2F&amp;#38;linkname=Build%20even%20faster%20Quarkus%20applications%20with%20fast-jar" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F08%2Fbuild-even-faster-quarkus-applications-with-fast-jar%2F&amp;#38;linkname=Build%20even%20faster%20Quarkus%20applications%20with%20fast-jar" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F08%2Fbuild-even-faster-quarkus-applications-with-fast-jar%2F&amp;#38;linkname=Build%20even%20faster%20Quarkus%20applications%20with%20fast-jar" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F08%2Fbuild-even-faster-quarkus-applications-with-fast-jar%2F&amp;#38;linkname=Build%20even%20faster%20Quarkus%20applications%20with%20fast-jar" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F08%2Fbuild-even-faster-quarkus-applications-with-fast-jar%2F&amp;#38;linkname=Build%20even%20faster%20Quarkus%20applications%20with%20fast-jar" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F08%2Fbuild-even-faster-quarkus-applications-with-fast-jar%2F&amp;#38;linkname=Build%20even%20faster%20Quarkus%20applications%20with%20fast-jar" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F04%2F08%2Fbuild-even-faster-quarkus-applications-with-fast-jar%2F&amp;#038;title=Build%20even%20faster%20Quarkus%20applications%20with%20fast-jar" data-a2a-url="https://developers.redhat.com/blog/2021/04/08/build-even-faster-quarkus-applications-with-fast-jar/" data-a2a-title="Build even faster Quarkus applications with fast-jar"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/08/build-even-faster-quarkus-applications-with-fast-jar/"&gt;Build even faster Quarkus applications with fast-jar&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/l3G5vq2brYE" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Quarkus is already fast, but what if you could make inner loop development with the supersonic, subatomic Java framework even faster? Quarkus 1.5 introduced fast-jar, a new packaging format that supports faster startup times. Starting in Quarkus 1.12, this great feature became the default packaging format for Quarkus applications. This article introduces you to the [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/04/08/build-even-faster-quarkus-applications-with-fast-jar/"&gt;Build even faster Quarkus applications with fast-jar&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/04/08/build-even-faster-quarkus-applications-with-fast-jar/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">884257</post-id><dc:creator>Daniel Oh</dc:creator><dc:date>2021-04-08T07:00:05Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/04/08/build-even-faster-quarkus-applications-with-fast-jar/</feedburner:origLink></entry><entry><title type="html">Headless eCommerce - Common architectural elements</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/1vfsy29GmIk/headless-ecommerce-common-architectural-elements.html" /><author><name>Eric D. Schabell</name></author><id>http://feedproxy.google.com/~r/schabell/jboss/~3/YHEbyyin6ig/headless-ecommerce-common-architectural-elements.html</id><updated>2021-04-08T05:00:00Z</updated><content type="html">Part 2 - Common architectural elements  In our  from this series we introduced a use case around headless e-commerce for retail stores. The process was laid out how we've approached the use case and how portfolio solutions are the base for researching a generic architectural blueprint.  The only thing left to cover was the order in which you'll be led through the blueprint details. This article starts the real journey at the very top, with a generic architecture from which we'll discuss the common architectural elements one by one. This will start our journey into the logical elements that make up the headless e-commerce architecture blueprint. BLUEPRINTS REVIEW As mentioned before, the architectural details covered here are base on real solutions using open source technologies. The example scenario presented here is a generic common blueprint that was uncovered researching those solutions. It's our intent to provide a blueprint that provides guidance and not deep technical details. This section covers the visual representations as presented, but it's expected that they'll be evolving based on future research. There are many ways to represent each element in this architectural blueprint, but we've chosen a format that we hope makes it easy to absorb. Feel free to post comments at the bottom of this post, or  with your feedback. Now let's take a look at the details in this blueprint and outline the solution. FROM SPECIFIC TO GENERIC Before diving in to the common elements, it might be nice to understand that this is not a catch all for every possible supply chain integration solution. It's a collection of identified elements that we've uncovered in multiple customer implementations. These elements presented here are then the generic common architectural elements that we've identified and collected in to the generic architectural blueprint.  It's our intent to provide a blueprint for guidance and not deep technical details. You're smart enough to figure out wiring integration points in your own architectures. You're capable of slotting in the technologies and components you've committed to in the past where applicable.  It's our job here to describe the architectural blueprint generic components and outline a few specific cases with visual diagrams so that you're able to make the right decisions from the start of your own projects. Another challenge has been how to visually represent the architectural blueprint. There are many ways to represent each element, but we've chosen some icons, text and colours that we hope are going to make it all easy to absorb.  Now let's take a quick tour of the generic architecture and outline the common elements uncovered in my research. DEVELOPER As you notice from the beginning, this logical diagram starts with a focus on cloud native development and the developer. For those that have looked at already, you'll notice the developer is central to delivering the components used in a headless e-commerce solution. For this blueprint the researched customers provided, as you could image, a diverse set of developer elements to choose from. We've chosen to group some and selected the elements shown in the image. The developer IDE is pretty universal, the tooling that the developer is coding in. Some form of source code management repository is used, but all research pointed to a Git-based repository. The remaining elements encompass as selection of the enterprise frameworks encountered, but are not by any means definitive. We captured integration based on Camel and Fuse, and often some collection of Java runtimes. While not illustrated as a distinct component, some form of dependency management was employed. In all researched cases it was an Apache Maven repository, but we've chosen to leave them out of this logical overview for the reasons of simplicity. CONTAINER PLATFORM CI / CD A container platform hosting the continuous integration (CI) and continuous development (CD) tooling is the main element in this group. The CI/CD platform can be any number of available tools, but as a concrete example, many implementations are using Jenkins tooling. Here you again see the SCM repertory as an element just like you saw in the previous developer section. This represents the connection between developer and collecting project artefacts for use in the container CI/CD platform for testing, tagging, and rolling out to various infrastructure environments in a retail organisation. PRESENTATION TIER This tier is used to collect the elements used for front end presentation for the headless e-commerce suite. This can be any number of applications used by customers to interact with the e-commerce platform, but also third parties allowed to interact with the platform.  All of these applications can be found in the generic element web applications, with a secondary element called frontend microservices that represent integration points for applications into the headless e-commerce platform. CONTAINER PLATFORM The bulk of the headless e-commerce platform can be found here in the container platform where a collection of services and communication tools are provided independent elements of deployment that support a cohesive whole. A core element of any integration platform is to provide some form of messaging to ensure that both communication and transformation of that communication is possible across the headless e-commerce platform.  Both integration microservices and integration data microservices are elements that consistently provide access to backend organisational systems, data sources, and other aspects of the retail organisation such as real-time stock control solutions or the retail data framework. In other articles, we'll cover these two architecture blueprints and you can search for them on this site for more details. To support customer interaction throughout the headless e-commerce platform there are collections of microservices, each focusing on one aspect of the customer interaction.  These are very generic descriptions as each retail organisation can determine what they consider core services. The first group is referred to as customer brand adapter microservices that ensure specific focus on creating a brand connection with the customer on your platform.  Another set of services are called the customer composite microservices that focus on coarser grained interactions with customers on their shopping journey in your online store. The basic set of services are called the customer core microservices and provide the basic interactions with customers for all parts of the e-commerce platform.  A final element is a collection of customer anti-corruption microservices that is a grouping related to the processes around payments for customers that might need access to processes around anti-money laundering or other fraud related detection mechanisms. There are often legal aspects to your specific country that effects what you need to comply with regarding corruption detection, so that's left to the reader to pursue with their retail organisations legal department. INFRASTRUCTURE SERVICES These elements in the common architecture were pretty consistent across all of the Headless eCommerce solutions examined. These tended to be core elements setup in the retail organisations central location with the ability to control communication and overall integration for the complete architecture. A centralised integration element here is outside of the container platform integration elements discussed in the previous section and has a focus on more legacy integration aspects of an existing retail organisation.  The API management element here is for access to the headless e-commerce platform both by customers and also for third party connectivity to anything that your organisation might want to expose for use.  It goes without saying (almost), that a single-sign-on (SSO) server is essential for tying in the organisational tooling for authorisation and authentication to make use of components in the architecture. STORAGE SERVICES The storage services uncovered in this solution space was a fairly narrow with traditional relational database management system storage element and the open source Ceph storage solution.  There was not a lot of need for diversity in these services as the solution is squarely focused on the development and delivery pipeline for the e-commerce elements. WHAT'S NEXT This was just a short overview of the common generic elements that make up our architecture blueprint for the headless e-commerce imaging use case.  An overview of this series on the headless e-commerce portfolio architecture blueprint can be found here: 1. 2. 3. Example headless architectures Catch up on any articles you missed by following one of the links above. Next in this series, taking a look at an example headless architecture to provide you with a map for your own e-commerce solution. (Article co-authored by , Chief Architect Retail, Red Hat)&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/1vfsy29GmIk" height="1" width="1" alt=""/&gt;</content><dc:creator>Eric D. Schabell</dc:creator><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/YHEbyyin6ig/headless-ecommerce-common-architectural-elements.html</feedburner:origLink></entry><entry><title type="html">Design Tools Highlights on Kogito and Business Central, April 2021</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Ike7gzG_JqA/design-tools-highlights-on-kogito-and-business-central-april-2021.html" /><author><name>Eder Ignatowicz</name></author><id>https://blog.kie.org/2021/04/design-tools-highlights-on-kogito-and-business-central-april-2021.html</id><updated>2021-04-08T05:00:00Z</updated><content type="html">In the last months, the Design Tools Team released many cool new features on and . This post will do a quick overview of those. I hope you enjoy it! DASHBUILDER PROGRAMMATIC LAYOUT API Until the launch of this new API, the only way to create dashboards on Dashbuilder was via drag and drop on Layout Editor. Now, users can create their Dashboards, pages, components, and data sets directly on Java. Here is an example of the usage of such API: import org.dashbuilder.dataset.* import org.dashbuilder.displayer.DisplayerSettings; import org.dashbuilder.dsl.factory.component.ComponentFactory; import org.dashbuilder.dsl.factory.dashboard.DashboardFactory; import org.dashbuilder.dsl.model.* import org.dashbuilder.dsl.serialization.* import static java.util.Arrays.asList; import static org.dashbuilder.dataset.DataSetFactory.newDataSetBuilder; import static org.dashbuilder.displayer.DisplayerSettingsFactory.newBarChartSettings; import static org.dashbuilder.dsl.factory.navigation.NavigationFactory.*; import static org.dashbuilder.dsl.factory.page.PageFactory.*; public class SimpleDashboard { public static void main(String[] args) { DataSet dataSet = newDataSetBuilder().column("Country", ColumnType.LABEL) .column("Population", ColumnType.NUMBER) .row("Brazil", "211") .row("United States", "328") .row("Cuba", "11") .row("India", "1366") .row("China", "1398") .buildDataSet(); DisplayerSettings populationBar = newBarChartSettings().subType_Column() .width(800) .height(600) .dataset(dataSet) .column("Country") .column("Population") .buildSettings(); Page page = page("Countries Population", row("&lt;h3&gt; Countries Population &lt;/h3&gt;"), row(ComponentFactory.displayer(populationBar))); Navigation navigation = navigation(group("Countries Information", item(page))); Dashboard populationDashboard = DashboardFactory.dashboard(asList(page), navigation); DashboardExporter.get().export(populationDashboard, "/path/to/export.zip", ExportType.ZIP); } } hosted with ❤ by It will generate the following dashboard: We also introduced a “dev mode” to Dashbuilder Runtime, which automatically updates the Dashbuilder Runtime while developing and exporting the ZIP. Soon, we will publish a blog post with more details about this new feature, but meanwhile, a sneak peek of authoring workflow using it: DMN EDITOR – ENHANCED CODE-COMPLETION FOR LITERAL FEEL EXPRESSIONS Context-aware code completion is one of the most important features an IDE can provide to speed up coding, reduce typos and avoid other common mistakes. On Kogito Tooling 0.9.0 release, we introduced enhanced code-completion for Literal FEEL expressions. Check out this video: See this full for details. BPMN EDITOR – READ-ONLY MODE Since October, we also ship our editors as a standalone npm package. One of my favorite features of the standalone is the read-only mode because it is really useful for diagram visualization. Now, this mode is also supported on BPMN. The read-only mode is also used for the visualization of diagrams on our Chrome Extension. WORK ITEM DEFINITION SUPPORT IMPROVEMENTS To evolve our Work Item Definition support on Kogito Tooling BPMN editor, we included on 0.9.0 a lot of improvements in this area, primarily related to a better parsing mechanism and also better compatibility with Business Central. Now, we also search for wids and icons the ‘global’ directory used on BC. DASHBUILDER PROMETHEUS DATA SET PROVIDER Dashbuilder can read data from multiple types of data set sources, including CSV, SQL, ElasticSearch, and Kie Server. Since Business central 7.50.0 Final, we introduced a new type of provider for data sets: Prometheus. Prometheus is the standard for collecting metrics. It has connectors to very well-known systems, such as Kafka and metrics can be easily consumed from third-party systems. Furthermore, Kie Server by default also exports ! See a sample Dashboard based on Prometheus data: For a full description of this new feature, take a look at this . DASHBUILDER KAFKA DATA SET PROVIDER We also recently introduced Dashbuilder support for Kafka data sets. Kafka is the standard event streaming platform for cloud applications and RHPAM/Kogito systems expose metrics using Kafka, so this is the reason why we added Kafka support on Dashbuilder as a data set provider. Soon we will publish a blog post with more details about this new feature. DASHBUILDER TIME SERIES DISPLAYER This new component represents time-series metrics to smoothly support the new Prometheus data-set provider. Now, you can provide a custom dataset or Prometheus metrics and create visualizations of your time series data on a line or area chart using Dashbuilder. See this for more details. GWT 2.9 AND JDK11 UPGRADE After a collective effort involving many people from a lot of different teams, we also did two major upgrades on our codebase, supporting JDK11 compilation and GWT 2.9 on Business Central. This is a huge effort in a sizable codebase, so congrats to everyone involved! OTHER IMPORTANT ISSUES AND IMPROVEMENTS: BPMN: * Move the structure option to the top of the Data Type drop-down * – [BPMN] Open subprocesses in a new editor on BC only * Stunner – Text area for scripts is cropped/shifted * Stunner – Not all illegal characters are removed from Data Object name * : Erase of WID ‘nodes’ types DMN: * Move the structure option to the top of the Data Type drop-down * Allow sorting in guided decision table when clicking the column name SCESIM * Test Scenario does not support nested Enum type attributes * Scenario Simulation type error popup when constraint applied to DMN data type * Display actual test results instead of a generic message * SceSim runner does not display reason for failure THANK YOU TO EVERYONE INVOLVED! I would like to thank everyone involved with this release, from the excellent KIE Tooling Engineers to the lifesavers QEs and the UX people that help us look awesome! The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Ike7gzG_JqA" height="1" width="1" alt=""/&gt;</content><dc:creator>Eder Ignatowicz</dc:creator><feedburner:origLink>https://blog.kie.org/2021/04/design-tools-highlights-on-kogito-and-business-central-april-2021.html</feedburner:origLink></entry><entry><title type="html">This Week in JBoss - 8 April 2021</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Z_OYMtjy6vo/weekly-2021-04-08.html" /><category term="quarkus" /><category term="wildfly" /><category term="keycloak" /><category term="kogito" /><category term="elytron" /><category term="containers" /><category term="javascript" /><author><name>Don Naro</name><uri>https://www.jboss.org/people/don-naro</uri><email>do-not-reply@jboss.com</email></author><id>https://www.jboss.org/posts/weekly-2021-04-08.html</id><updated>2021-04-08T00:00:00Z</updated><content type="html">&lt;article class="" data-tags="quarkus, wildfly, keycloak, kogito, elytron, containers, javascript"&gt; &lt;h1&gt;This Week in JBoss - 8 April 2021&lt;/h1&gt; &lt;p class="preamble"&gt;&lt;/p&gt;&lt;p&gt;Hello! Welcome to another edition of the JBoss Editorial that brings you news and updates from our community.&lt;/p&gt;&lt;p&gt;&lt;/p&gt; &lt;div class="sect1"&gt; &lt;h2 id="_release_roundup"&gt;Release roundup&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Let’s start things off with congrats to the teams on their hard work!&lt;/p&gt; &lt;div class="ulist square"&gt; &lt;ul class="square"&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://infinispan.org/blog/2021/04/07/infinispan-12-1-0-final"&gt;Infinispan 12.1.0.Final&lt;/a&gt; is released!&lt;br&gt; This version of Infinispan, codenamed Taedonggang, includes a bunch of new features and fixes. Be sure to check out the announcement and start using it right away.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://quarkus.io/blog/quarkus-1-13-0-final-released/"&gt;Quarkus 1.13&lt;/a&gt; and &lt;a href="https://quarkus.io/blog/quarkus-1-13-1-final-released/"&gt;Quarkus 1.13.1.Final&lt;/a&gt; are now available with loads of great new features and improvements.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;p&gt;Our very own Bela Ban has also recently finished off the work on &lt;a href="https://github.com/belaban/JGroups/tree/jgroups-4.2.12.Final"&gt;JGroups 4.2.12&lt;/a&gt; and &lt;a href="https://github.com/belaban/JGroups/tree/jgroups-5.1.6.Final"&gt;JGroups 5.1.6&lt;/a&gt;. While there might not be an "official" annoucement on his blog, you can check Bela’s commit history for details.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_from_the_community"&gt;From the community&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Let’s take a look at what’s been happening in the community since our last editorial.&lt;/p&gt; &lt;p&gt;First up is a post by Hao Wu, &lt;a href="https://blog.kie.org/2021/04/how-to-interact-with-business-processes-using-camel-routes.html"&gt;How to Interact with Business Processes Using Camel Routes&lt;/a&gt;, that neatly explains using Apache Camel to interact with business processes deployed in a KIE server.&lt;/p&gt; &lt;p&gt;Rebecca Searls, over at the RESTEasy blog, recently added a post titled &lt;a href="https://resteasy.github.io/2021/04/05/blog-ParamConverter-with-Quarkus/"&gt;JAX-RS ParamConverter with Quarkus&lt;/a&gt; that shows how to write RESTful services with Quarkus using the JAX-RS ParamConverter.&lt;/p&gt; &lt;p&gt;Eric Schabell has, yet again, delivered some great posts recently that demonstrate how community technology can solve real world business problems.&lt;/p&gt; &lt;p&gt;Finishing off a series of articles on point of sale architectures, Eric delves in a specific example in his post, &lt;a href="https://www.schabell.org/2021/03/point-of-sale-example-image-distribution-architecture.html"&gt;Point of sale - Example image distribution architecture&lt;/a&gt;. Be sure to check the links at the end of the post in case you missed any of the other articles in his architecture blueprint for point of sale imaging in retail.&lt;/p&gt; &lt;p&gt;Not one to rest, Eric kicks things off with another series to share an architectural blueprint for the use case of deploying a container-based eCommerce website while moving away from tightly coupled existing eCommerce platform.&lt;/p&gt; &lt;p&gt;This first article in this series is &lt;a href="https://www.schabell.org/2021/04/headless-ecommerce-an-architectural-introduction.html"&gt;Headless eCommerce - An architectural introduction&lt;/a&gt;, which gives you an outline for the use case.&lt;/p&gt; &lt;p&gt;Eric then continues the series with his post, &lt;a href="https://www.schabell.org/2021/04/headless-ecommerce-common-architectural-elements.html"&gt;Headless eCommerce - Common architectural elements&lt;/a&gt;. In this article, Eric goes into detail on common generic elements that make up the architecture blueprint for the headless eCommerce use case.&lt;/p&gt; &lt;p&gt;Stay tuned for the rest of Eric’s series! I’m sure there’s lots more great information on the way.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_red_hat_developer_network"&gt;Red Hat developer network&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;James Falkner talks us through what’s new with the beta release of JBoss EAP 7.4 beta, including an detailed look at security and management improvement. What to find out what’s going on? Take a few minutes and read his post, &lt;a href="https://developers.redhat.com/blog/2021/03/30/security-and-management-improvements-in-red-hat-jboss-enterprise-application-platform-7-4-beta/"&gt;Security and management improvements in Red Hat JBoss Enterprise Application Platform 7.4 Beta&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Pasquale Congiusti also breaks down Camel K’s Kamelets and shows how they simplify complex system integration in his post, &lt;a href="https://developers.redhat.com/blog/2021/04/02/design-event-driven-integrations-with-kamelets-and-camel-k/"&gt;Design event-driven integrations with Kamelets and Camel K&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_developers_on_film"&gt;Developers on film&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;p&gt;Get your popcorn ready and sit back to watch some videos from our community. Here are my top picks for this week’s editorial:&lt;/p&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://youtu.be/eW_1rj2EKYM"&gt;3 new Java tools to try in 2021&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://youtu.be/RZbLwBuKxuw"&gt;Quarkus Insights #43: Writing Quarkus Extensions&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://youtu.be/U_SqX5uMbds"&gt;Improving security with Istio | DevNation Tech Talk&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="author"&gt; &lt;pfe-avatar pfe-shape="circle" pfe-pattern="squares" pfe-src="/img/people/don-naro.png"&gt;&lt;/pfe-avatar&gt; &lt;span&gt;Don Naro&lt;/span&gt; &lt;/div&gt;&lt;/article&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Z_OYMtjy6vo" height="1" width="1" alt=""/&gt;</content><dc:creator>Don Naro</dc:creator><feedburner:origLink>https://www.jboss.org/posts/weekly-2021-04-08.html</feedburner:origLink></entry><entry><title type="html">How to Interact with Business Processes Using Camel Routes</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/r-9Wa4vZkgc/how-to-interact-with-business-processes-using-camel-routes.html" /><author><name>Hao Wu</name></author><id>https://blog.kie.org/2021/04/how-to-interact-with-business-processes-using-camel-routes.html</id><updated>2021-04-07T19:44:29Z</updated><content type="html">The JBPM KIE server has a rich set of REST APIs that allows control over business processes and other business assets. Interaction with business processes is straightforward and easily accessible. Usually these APIs are used by the Business Central component and custom applications. In this post I want to give a simple example of how to interact with business processes, deployed in a KIE server, using Apache Camel. Utilizing business processes in a camel route, as you will see, is pretty easy! There is an available component in Camel called simply the component. Both consumers and producers are supported. The consumer side has already been covered by Maciej in this excellent . My example will focus on the producer side. WHAT INTERACTIONS ARE AVAILABLE? The JBPM component uses exchange headers to hold the operations/commands used to interact with the KIE server. The query parameters in the URL holds the security and deployment information. The following is an example of an JBPM URL. jbpm:http://localhost:8080/kie-server/services/rest/server?userName=myuser&amp;amp;password=mypass&amp;amp;deploymentId=mydeployment That URL above will interact with the KIE server running on localhost port 8080, the container deployed as mydeployment, and using the user myuser and password mypass. Of course all these values can be parameterized. The following table shows some of the interactions available as of version Apache Camel 3.8. The header key for the operation header is JBPMConstants.OPERATION. All supported header keys are listed in the JBPMConstants class. OperationSupport HeadersDescriptionstartProcessPROCESS_ID PARAMETERSStart a process in the deployed container (in URL) and the process definition ID and any parameters.signalEventPROCESS_INSTANCE_ID EVENT_TYPE EVENTSignal a process instance with the signal (EVENT_TYPE) and payload (EVENT). If process instance ID is missing then the signal scope will be defaultgetProcessInstancePROCESS_INSTANCE_IDRetrieve the process instance using the ID. The resulting exchange body will be populated by a org.kie.server.api.model.instance.ProcessInstance object.completeWorkItemPROCESS_INSTANCE_ID WORK_ITEM_ID PARAMETERSComplete the work item using the parameters. You can find the complete list in the org.apache.camel.component.jbpm.JBPMProducer.Operation enum. SIMPLE EXAMPLE In this example we’ll be using the following versions: * * Install and start the JBPM KIE server. &gt; docker pull jboss/jbpm-server-full &gt; docker run -p 8080:8080 -p 8001:8001 -d --name jbpm-server-full jboss/jbpm-server-full:latest Log into Business Central () using wbadmin/wbadmin as the credentials. In the default MySpace, create a project call test-camel and a business process in it call test-camel-process. Add a process variable call data of type String. Add a script task to print out data. Save and deploy the project. To quickly stand up a Camel environment, we’ll be using Spring Boot. The following command will help you create the spring boot project: mvn archetype:generate \ -DarchetypeGroupId=org.apache.camel.archetypes \ -DarchetypeArtifactId=camel-archetype-spring-boot \ -DarchetypeVersion=3.8.0 In the resulting project, add the following dependency into the pom.xml file. &lt;dependency&gt; &lt;groupId&gt;org.apache.camel.springboot&lt;/groupId&gt; &lt;artifactId&gt;camel-jbpm-starter&lt;/artifactId&gt; &lt;/dependency&gt; Add the following to the application.properties file. server.port = 8280 jbpm.server.url = http://localhost:8080/kie-server/services/rest/server jbpm.server.user = wbadmin jbpm.server.pass = wbadmin jbpm.deployment.id = test-camel_1.0.0-SNAPSHOT jbpm.process.id = test-camel.test-camel-process jbpm.process.data = data Modify the MySpringBootRouter.java file to add some routes. The following code snippet will start a process. @Override public void configure() { from("timer:startprocess?delay=1000&amp;amp;period=5000") .to("direct:startprocess"); from("direct:startprocess") .setHeader(JBPMConstants.OPERATION, constant("CamelJBPMOperationstartProcess")) .setHeader(JBPMConstants.PROCESS_ID, simple("{{jbpm.process.id}}")) .process((Exchange exchange) -&gt; { String dataName = exchange.getContext().resolvePropertyPlaceholders("{{jbpm.process.data}}"); Map&lt;String, Object&gt; params = new HashMap&lt;&gt;(); params.put(dataName, "hello world"); exchange.getIn().setHeader(JBPMConstants.PARAMETERS, params); }) .to("jbpm:{{jbpm.server.url}}?userName={{jbpm.server.user}}&amp;amp;password={{jbpm.server.pass}}&amp;amp;deploymentId={{jbpm.deployment.id}}"); } The above example will send "hello world" as the data to start the process in the KIE server. By default without specifying JBPMConstants.OPERATION, the operation will be to start the process. The reason the operation is set to CamelJBPMOperationstartProcess is the operation is an aggregation of the value of JBPMConstants.OPERATION and the enum value defined in org.apache.camel.component.jbpm.JBPMProducer.Operation. Unfortunately we cannot use the operation enum directly because it’s not exposed publicly. The post appeared first on .&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/r-9Wa4vZkgc" height="1" width="1" alt=""/&gt;</content><dc:creator>Hao Wu</dc:creator><feedburner:origLink>https://blog.kie.org/2021/04/how-to-interact-with-business-processes-using-camel-routes.html</feedburner:origLink></entry></feed>
